[{"/Users/deeptej/Desktop/react/MyPal-dev/client/src/index.js":"1","/Users/deeptej/Desktop/react/MyPal-dev/client/src/serviceWorkerRegistration.js":"2","/Users/deeptej/Desktop/react/MyPal-dev/client/src/contexts/StateProvider.js":"3","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/reportWebVitals.js":"4","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/App.js":"5","/Users/deeptej/Desktop/react/MyPal-dev/client/src/contexts/reducer.js":"6","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/firebase.js":"7","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/Widgets.js":"8","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/Home.js":"9","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/SpeedDial.js":"10","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/Profile.js":"11","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/SearchMobile.js":"12","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/imageUpload/ImageUpload.js":"13","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/imageUpload/ImageUploadMobile.js":"14","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/navigation/Sidebar.js":"15","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/navigation/BottomNavigationMobile.js":"16","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/chat/SendMessage.js":"17","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/chat/WidgetsChat.js":"18","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/feed/FeedConfessions.js":"19","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/feed/Feed.js":"20","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/chat/Chat.js":"21","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/feed/FeedEvents.js":"22","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/events/EventSharingContainer.js":"23","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/events/CreateEvent.js":"24","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/confessions/ConfessionSharingContainer.js":"25","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/confessions/CreateConfessions.js":"26","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/user/UserProfile.js":"27","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/posts/PostSharingContainer.js":"28","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/chat/WigetsDummy.js":"29","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/Search.js":"30","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/SwipeTab.js":"31","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/navigation/SidebarOptions.js":"32","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/AlertDialog.js":"33","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/user/UserSwipeTab.js":"34","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/confessions/Confessions.js":"35","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/DateTimeSelect.js":"36","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/posts/Post.js":"37","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/events/Event.js":"38","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/chat/Message.js":"39","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/chat/WidgetMember.js":"40","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/chat/EmojiSelect.js":"41","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/user/client/YourBookmarks.js":"42","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/confessions/ConfessionsMenu.js":"43","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/user/UserEvents.js":"44","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/Comment.js":"45","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/user/UserPosts.js":"46","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/events/EventsMenu.js":"47","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/chat/GetRecentMessage.js":"48","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/posts/PostMenu.js":"49","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/user/client/YourEvents.js":"50","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/user/client/YourPosts.js":"51","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/BookmarkedEvent.js":"52","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/BookmarkedPost.js":"53"},{"size":845,"mtime":1634717906835,"results":"54","hashOfConfig":"55"},{"size":5064,"mtime":1634717906835,"results":"56","hashOfConfig":"55"},{"size":462,"mtime":1634717906834,"results":"57","hashOfConfig":"55"},{"size":362,"mtime":1634717906832,"results":"58","hashOfConfig":"55"},{"size":29065,"mtime":1635364338052,"results":"59","hashOfConfig":"55"},{"size":639,"mtime":1634717906834,"results":"60","hashOfConfig":"55"},{"size":2162,"mtime":1634717906829,"results":"61","hashOfConfig":"55"},{"size":1413,"mtime":1634717906824,"results":"62","hashOfConfig":"55"},{"size":240,"mtime":1634717906821,"results":"63","hashOfConfig":"55"},{"size":2343,"mtime":1634717906823,"results":"64","hashOfConfig":"55"},{"size":6494,"mtime":1634717906822,"results":"65","hashOfConfig":"55"},{"size":246,"mtime":1634717906823,"results":"66","hashOfConfig":"55"},{"size":7575,"mtime":1634717906830,"results":"67","hashOfConfig":"55"},{"size":6976,"mtime":1634717906830,"results":"68","hashOfConfig":"55"},{"size":2723,"mtime":1634717906831,"results":"69","hashOfConfig":"55"},{"size":2172,"mtime":1634717906831,"results":"70","hashOfConfig":"55"},{"size":4947,"mtime":1634717906825,"results":"71","hashOfConfig":"55"},{"size":3575,"mtime":1634717906826,"results":"72","hashOfConfig":"55"},{"size":2013,"mtime":1634717906829,"results":"73","hashOfConfig":"55"},{"size":1882,"mtime":1634717906829,"results":"74","hashOfConfig":"55"},{"size":4718,"mtime":1634717906824,"results":"75","hashOfConfig":"55"},{"size":2179,"mtime":1634717906829,"results":"76","hashOfConfig":"55"},{"size":1599,"mtime":1634717906828,"results":"77","hashOfConfig":"55"},{"size":8914,"mtime":1634717906828,"results":"78","hashOfConfig":"55"},{"size":1446,"mtime":1634717906827,"results":"79","hashOfConfig":"55"},{"size":1986,"mtime":1634717906828,"results":"80","hashOfConfig":"55"},{"size":7032,"mtime":1635364628546,"results":"81","hashOfConfig":"55"},{"size":1402,"mtime":1634717906832,"results":"82","hashOfConfig":"55"},{"size":1106,"mtime":1634717906826,"results":"83","hashOfConfig":"55"},{"size":2321,"mtime":1634717906822,"results":"84","hashOfConfig":"55"},{"size":3373,"mtime":1634717906823,"results":"85","hashOfConfig":"55"},{"size":415,"mtime":1634717906831,"results":"86","hashOfConfig":"55"},{"size":1006,"mtime":1634717906819,"results":"87","hashOfConfig":"55"},{"size":2888,"mtime":1634717906833,"results":"88","hashOfConfig":"55"},{"size":10134,"mtime":1634717906827,"results":"89","hashOfConfig":"55"},{"size":6094,"mtime":1634717906821,"results":"90","hashOfConfig":"55"},{"size":22132,"mtime":1634794423191,"results":"91","hashOfConfig":"55"},{"size":6820,"mtime":1634717906828,"results":"92","hashOfConfig":"55"},{"size":2589,"mtime":1634717906825,"results":"93","hashOfConfig":"55"},{"size":4286,"mtime":1634717906826,"results":"94","hashOfConfig":"55"},{"size":604,"mtime":1634717906824,"results":"95","hashOfConfig":"55"},{"size":2581,"mtime":1634717906833,"results":"96","hashOfConfig":"55"},{"size":3768,"mtime":1634717906827,"results":"97","hashOfConfig":"55"},{"size":2038,"mtime":1634717906833,"results":"98","hashOfConfig":"55"},{"size":3379,"mtime":1635362219965,"results":"99","hashOfConfig":"55"},{"size":2289,"mtime":1634717906833,"results":"100","hashOfConfig":"55"},{"size":4367,"mtime":1634717906828,"results":"101","hashOfConfig":"55"},{"size":3549,"mtime":1634717906825,"results":"102","hashOfConfig":"55"},{"size":4324,"mtime":1634717906832,"results":"103","hashOfConfig":"55"},{"size":2198,"mtime":1634717906834,"results":"104","hashOfConfig":"55"},{"size":2642,"mtime":1634717906834,"results":"105","hashOfConfig":"55"},{"size":1345,"mtime":1634717906820,"results":"106","hashOfConfig":"55"},{"size":1211,"mtime":1634717906820,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},"1hatwxj",{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"110"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"110"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"110"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"110"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"110"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"110"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"110"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"110"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"110"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"110"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"110"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"110"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"110"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"110"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"110"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"110"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"110"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"110"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"110"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"110"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"110"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"110"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"110"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"110"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"110"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"110"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"110"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"110"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"110"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"110"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"229","messages":"230","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"110"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"110"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"110"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"110"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"110"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"110"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"110"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"110"},"/Users/deeptej/Desktop/react/MyPal-dev/client/src/index.js",[],["253","254"],"/Users/deeptej/Desktop/react/MyPal-dev/client/src/serviceWorkerRegistration.js",[],"/Users/deeptej/Desktop/react/MyPal-dev/client/src/contexts/StateProvider.js",[],"/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/reportWebVitals.js",[],"/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/App.js",["255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274"],"import React, {useState,useEffect, Suspense,lazy} from 'react';\nimport './App.css';\nimport {auth, DataBase} from './firebase'\nimport {makeStyles} from '@material-ui/core/styles'\nimport Modal from '@material-ui/core/Modal'\nimport { AppBar, Avatar, Backdrop, Button, FormControl, Input, InputLabel, MenuItem, Snackbar } from '@material-ui/core';\nimport ImageUpload from './imageUpload/ImageUpload';\nimport Sidebar from './navigation/Sidebar';\nimport Widgets from './Widgets';\nimport { BrowserRouter as Router ,Link} from 'react-router-dom'\nimport {Route,Switch} from 'react-router-dom'\nimport Chat from './chat/Chat'\nimport {useStateValue} from '../contexts/StateProvider';\nimport { actionTypes } from '../contexts/reducer';\nimport firebase from 'firebase/app'\nimport SendMessage from './chat/SendMessage'\n//Get material-ui icons\nimport SearchIcon from '@material-ui/icons/Search';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport BottomNavigationMobile from './navigation/BottomNavigationMobile'\nimport logo from '../texx_logo.png'\nimport {realtime} from './firebase'\nimport { getToken } from './firebase';\nimport { onMessageListener } from './firebase';\nimport Home from './Home'\nimport UserProfile from './user/UserProfile';\nimport Select from '@material-ui/core/Select';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport SpeedDiall from './SpeedDial';\n\n//custom alert for notifications toast\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n//====================================Modal styles=========================================\nfunction getModalStyle() {\n  const top = 50 ;\n  const left = 50 ;  \n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    [theme.breakpoints.down(\"xs\")]: {\n      width: 250,\n    },\n    [theme.breakpoints.between(\"sm\", \"lg\")]: {\n      width: 450,\n    },\n    backgroundColor:'#2E3336',\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n    color:'white'\n    },\n    root: {\n    display: 'flex',\n    objectFit: 'contain',\n    backgroundColor: '#363A3E',\n    padding:'10px',\n    position: 'sticky',\n    zIndex: 100, \n    },\n    backdrop: {\n      zIndex: 1,\n      color: '#ffffff',\n    },\n    speedDial: {\n      position: 'fixed',\n      bottom: theme.spacing(12),\n      right: theme.spacing(2),\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    notif:{\n      backgroundColor:'red',\n    },\n}));\n//========================================================================================================\nfunction App() {\n  //dispatch for the user\n  const [{},dispatch] = useStateValue();\n  const classes = useStyles();\n  //modal styles\n  const [modalStyle] = useState(getModalStyle);\n  //initially unless fired dont show the model for sign in\n  const [openSignIn,setOpenSignIn] = useState(false);\n  //initially unless fired dont show the model for sign up\n  const [open,setOpen] = useState(false);\n  //for requiring sign in/sign up to upload\n  const [openRequired,setOpenRequired] = useState(false)\n  //store username of the person who wrote the post\n  const [username,setUsername] = useState('');\n  //store email\n  const [email,setEmail] = useState('');\n  //store password\n  const [password,setPassword] = useState('');\n  //store bio\n  const [bio,setBio] = useState('');\n  //flag to keep track of whether the user has logged in or not (user who's signed in )\n  const [user,setUser] = useState([]);\n  //save userId \n  const [userId,setUserId] = useState(null)\n  //show password for password field\n  const [showPassword,setShowPassword] = useState(false)\n  //select institute in sign up\n  const [institute,setInstitute] = useState('')\n  //push notifications permissions token:\n  const [isTokenFound, setTokenFound] = useState(false);\n  //push notifications open/close\n  const [show, setShow] = useState(false);\n  // const [notification, setNotification] = useState({title: '', body: ''});\n  // getToken(setTokenFound);\n\n  //alerts as snackbars (show/message)\n  const [showSnackbar, setShowSnackbar] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n\n  // onMessageListener().then(payload => {\n  //   setShow(true);\n  //   setNotification({title: payload.notification.title, body: payload.notification.body})\n  //   console.log(payload);\n  // }).catch(err => console.log('failed: ', err));\n\n  // getToken(setTokenFound);\n  //user stored in local storage\n  let userFromLocalStorage\n  //\n  let user_Id\n  //lazy loading\n  const Profile = React.lazy(() => import('./Profile'))\n  const Feed = React.lazy(() => import('./feed/Feed'))\n  const Chat = React.lazy(() => import('./chat/Chat'))\n  const CreateEvent = React.lazy(() => import('./events/CreateEvent'))\n  const CreateConfessions = React.lazy(() => import('./confessions/CreateConfessions'))\n  const FeedEvents = React.lazy(() => import('./feed/FeedEvents'))\n  const FeedConfessions = React.lazy(() => import('./feed/FeedConfessions'))\n  const ImageUploadMobile = React.lazy(() => import('./imageUpload/ImageUploadMobile'))\n  const WidgetsChat = React.lazy(() => import('./chat/WidgetsChat'))\n  const PostSharingContainer = React.lazy(() => import('./posts/PostSharingContainer'))\n  const SearchMobile = React.lazy(() => import('./SearchMobile'))\n  const ConfessionSharingContainer = React.lazy(() => import('./confessions/ConfessionSharingContainer'))\n  const EventSharingContainer = React.lazy(() => import('./events/EventSharingContainer'))\n\n  //====================================Get the user from the local storage on refresh======================\n  useEffect(()=>{\n    userFromLocalStorage = localStorage.getItem('user')\n    //if there is a user object saved in local storage then set it equal to 'user'\n    if (userFromLocalStorage){\n      //JSON.parse will convert stringify to JSON\n      // setUser(JSON.parse(userFromLocalStorage))\n      // console.log(JSON.parse(userFromLocalStorage))\n      try {\n        \n        dispatch(\n            {\n            type:actionTypes.SET_USER,\n            user:JSON.parse(userFromLocalStorage)\n            }\n          )\n        \n        \n      }\n    \n    catch (err){\n      // alert(err.message)\n      setShowSnackbar(true);\n      setSnackbarMessage(err.message)\n    }\n  }\n\n  },[])\n\n//====================================Authorization state listner=========================================\n  useEffect(()=>{\n    //onAuthStateChanged = listnser to changes in authorization state\n    //when user is logged in or logged out or is changed\n    const unsubscribe = auth.onAuthStateChanged((authUser)=>{\n    //if user has logged in \n    if (authUser){\n      console.log(authUser)\n      //capture the user inside the auth state in the 'setuser' variable\n      user_Id = authUser.uid\n      //=============survive the refresh================\n      //you can only store string items in local storage\n\n      localStorage.setItem('user',JSON.stringify(authUser))\n\n\n      setUser(authUser)\n    }\n    // else if user has logged out set user to null\n    else{\n      setUser(null)\n    }\n\n  })\n  //===============Add user status as 'online:true' to database as this component loads=====\n  user && \n\n    realtime.ref('.info/connected').on('value',snapshot=>{\n\n        //make user status 'offline  in realtime database if user disconnects\n        realtime\n        .ref(`/status/${user_Id}`)\n        .onDisconnect() // Set up the disconnect hook\n        .set('offline') // The value to be set for this key when the client disconnects \n        .then(() => {\n          //set firestore's user 'online' key to true\n          DataBase.collection('users').doc(user_Id).update({\n            online:true,\n          },console.log(user_Id+\" user offline\"))\n        })\n\n        //make user status 'online' in realtime database when page component loads \n        realtime.ref(`/status/${user_Id}`).set('online');\n      })\n\n\n  //========================================================================================\n\n},[user,username])\n//sign up inside sign in\nconst handleSignUp= () => {\n  setOpen(true)\n  setOpenSignIn(false)\n\n}\n//close notifications toast\nconst handleCloseNotif = (event, reason) => {\n  if (reason === 'clickaway') {\n    return;\n  }\n  setShow(false);\n};\n//====================================sign in the user=========================================\n  const signIn = (e) => {\n    e.preventDefault();\n    auth.signInWithEmailAndPassword(email,password)\n    .then((result)=>{\n      //dispatch user to state management\n      dispatch(\n          {\n          type:actionTypes.SET_USER,\n          user:result.user\n          }\n        );\n      localStorage.setItem('user',JSON.stringify(result.user))\n\n    //empty the fields\n    setEmail('')\n    setPassword('')\n\n    })\n    .catch((error) => { \n      // alert(error.message)\n      setShowSnackbar(true)\n      setSnackbarMessage(error.message)\n    })\n    //close the model\n    setOpenSignIn(false)\n    \n  }\n//====================================sign up the user=========================================\n//bug:requires sign in after sign up\n  const signUp = (e) => {\n    e.preventDefault();\n    if(username!==''){\n    auth.createUserWithEmailAndPassword(email,password)\n    //createUserWithEmailAndPassword will create a user object \n    .then(function(authUser){\n        authUser.user.updateProfile({\n        //set displayname attribute of user object to username\n        displayName:username\n      })            \n      console.log(authUser+ \"result after sign up\")\n      \n      //sign in\n      auth.signInWithEmailAndPassword(authUser.user.email,password)\n      .then((result)=>{\n        //dispatch user to state management\n        dispatch(\n            {\n            type:actionTypes.SET_USER,\n            user:result.user\n            }\n          );\n        localStorage.setItem('user',JSON.stringify(result.user))\n      })\n          //added the newly created user to our firestore database for posts \n          DataBase.collection('users').doc(authUser.user.uid).set({\n            email:authUser.user.email,\n            displayName:username,\n            bio:bio,\n            online:true,\n            institute:institute,\n            timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n           })\n           //add the newly created user to realtime db for messages\n           realtime\n           .ref(`/'users'/${authUser.user.uid}`)\n           .set({displayName : username},\n            (error) => {\n            if (error) {\n              // alert(error.message)\n              setShowSnackbar(true);\n              setSnackbarMessage(error.message)\n            } else {\n              // alert(\"User created successfully\")\n              setShowSnackbar(true)\n              setSnackbarMessage(\"User created successfully.\")\n            }\n        \n          })\n    setOpen(false)\n  })//catch error if data filled is not in the proper format\n  .catch((error)=>{\n    // alert(error.message)\n    setShowSnackbar(true)\n    setSnackbarMessage(error.message)\n  })\n}\nelse{\n  alert(\"Username cant be empty\")\n}\n}\n//===============================================================================================\n  return (\n    <div className=\"app\">\n\n    <Snackbar\n        anchorOrigin={{\n          horizontal: \"center\",\n          vertical: \"top\",\n        }}\n        open={showSnackbar}\n        onClose={()=>{\n          setShowSnackbar(false);\n          setSnackbarMessage(\"\");\n        }}\n        key={ \"top\" +  \"center\"}\n        autoHideDuration={800}\n        message={snackbarMessage}\n      />\n\n      {/* <Snackbar open={show} autoHideDuration={6000} onClose={handleCloseNotif}>\n            <img\n              src={logo}\n              alt=\"MyPal-logo\"\n            />\n            <strong>{notification.title}</strong>\n            <small>just now</small>\n        <Alert onClose={handleCloseNotif}>\n              {notification.body}\n        </Alert>\n      </Snackbar>\n\n      {isTokenFound?(console.log(\"notifications permission given\")):(console.log(\"notifications permission NOT given\"))}\n        */}\n                                      {/*Modal for sign up*/}\n      <Modal  open={open} onClose={()=>{setOpen(false)}}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n            <center>\n              {/* <img  className=\"app__headerImage\" src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo-2x.png/1b47f9d0e595.png\" alt=\"ig-logo\"/>   */}\n            </center>\n            <Input style ={{color:'aliceblue'}} placeholder=\"username\" type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)}/>\n            <Input style ={{color:'aliceblue'}} placeholder=\"email\" type=\"text\" value={email} onChange={(e) => setEmail(e.target.value)}/>\n            <Input style ={{color:'aliceblue',margin:'10px'}}\n            id=\"standard-adornment-password\"\n            placeholder=\"password\"\n            type={showPassword ? 'text' : 'password'}\n            value={password} onChange={(e) => setPassword(e.target.value)}\n            endAdornment={\n              <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle password visibility\"\n                  onClick={() => \n                    setShowPassword(!showPassword )\n                  }\n                  onMouseDown={(e) => \n                    e.preventDefault()}\n                >\n                  {showPassword ? <Visibility /> : <VisibilityOff />}\n                </IconButton>\n              </InputAdornment>\n            }\n          />\n            <Input style ={{color:'aliceblue'}} placeholder=\"Add your biography\" type=\"text\" value={bio} onChange={(e)=>setBio(e.target.value)}/>\n            {/*select institute*/}\n          <FormControl className={classes.formControl}>\n            <InputLabel id=\"demo-simple-select-label\">Institute</InputLabel>\n              <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={institute}\n                onChange={(e)=>{setInstitute(e.target.value)}}\n              >\n                <MenuItem value={'MIT'}>MIT</MenuItem>\n                <MenuItem value={'KMC'}>KMC</MenuItem>\n                <MenuItem value={'MSAP'}>MSAP</MenuItem>\n                <MenuItem value={'MAHE'}>MAHE</MenuItem>\n                {console.log(institute)}\n              </Select>\n          </FormControl>\n            <Button style ={{color:'aliceblue'}} onClick={signUp}>Sign up</Button>\n          </form>\n        </div>\n      </Modal>\n\n                                        {/*Modal for sign in*/}\n\n                                     {/*if user is not logged in then keep sign in modal open*/}\n                                     {/*if the user chooses sign up option then close the sign in modal*/}\n      <Modal  open={open?false:(!user?true : openSignIn)} onClose={()=>{setOpenSignIn(false)}}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n            <center>\n            <img className=\"app__headerImage\" src={logo} alt=\"texx-logo\"/>\n            </center>\n            <p style={{margin:'10px'}} >Enter your credentials to Log in to MyPal</p>\n            <Input style ={{color:'aliceblue',margin:'10px'}} placeholder=\"email\" type=\"text\" value={email} onChange={(e) => setEmail(e.target.value)}/>\n            <Input style ={{color:'aliceblue',margin:'10px'}}\n            id=\"standard-adornment-password\"\n            placeholder=\"password\"\n            type={showPassword ? 'text' : 'password'}\n            value={password} onChange={(e) => setPassword(e.target.value)}\n            endAdornment={\n              <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle password visibility\"\n                  onClick={() => \n                    setShowPassword(!showPassword )\n                  }\n                  onMouseDown={(e) => \n                    e.preventDefault()}\n                >\n                  {showPassword ? <Visibility /> : <VisibilityOff />}\n                </IconButton>\n              </InputAdornment>\n            }\n          />\n            <Button style ={{color:'aliceblue',backgroundColor:'#556AB5'}} onClick={signIn}>Sign In</Button>\n            <p style={{margin:'10px'}}>New to MyPal? Sign up</p>\n            <Button style ={{color:'aliceblue',backgroundColor:'#556AB5'}} onClick={handleSignUp}>Sign up</Button>\n          </form>\n        </div>\n      </Modal>\n\n                                              {/*header*/}\n      <AppBar position=\"static\" className={classes.root} elevation={8}>\n          <div className=\"app__header\">\n            <div className=\"app__headerLogo\">\n              <Router>\n                <Link to=\"/\" onClick={()=>window.location.href= '/'}><img className=\"app__headerImage\" src={logo} alt=\"MyPal-logo\"/></Link>\n              </Router>\n            </div>\n\n\n                                              {/*serachbar for mobile view*/}\n            <div className=\"app__searchbarMobile\">\n             \n              <Router>\n                <Link to=\"/searchMobile\" onClick={()=>window.location.href=\"/searchMobile\"}><SearchIcon style={{color:'aliceblue'}}></SearchIcon></Link>\n              </Router>\n                {/* <Input style={{color:\"aliceblue\",fontSize:'small'}} className=\"app__searchbarMobileInput\" type= \"text\" placeholder=\"Search Texx\"/>\n                <SearchIcon style={{color:\"aliceblue\"}}/> */}\n           \n            </div>\n\n                                        {/*profile section*/}\n              <div className=\"app__headerProfile\">\n                <Router><Link><Avatar className=\"app__headerAvatar\" alt={username} src=\"/static/images/avatar/1.jpg\"  onClick={()=>window.location.href='/profile'} /></Link></Router>\n                <b><p className=\"app__headerDisplayName\">{user?.displayName}</p></b>\n              </div>\n          </div>\n      </AppBar>                                               \n                           {/* if user does not exists then reduce the opacity of the body */}\n      <div className={user?'app__body':'app__bodyUserNotLoggedIn' }>\n{/* =================================================REACT ROUTER COMES HERE================================================================================= */}\n                  \n        {/* if user is logged out then show the home page */}\n        {!user? (<Home/>):\n                (<Router>\n                                                                      {/*SpeedDial for mobile view*/}\n                    <div className=\"app__speedDialMobile\">\n                        <SpeedDiall></SpeedDiall>\n                    </div>\n                                          {/*sidebar*/}\n                    <Sidebar/>\n                                            {/*switch*/}\n                    <Switch>             \n                        <Route exact path=\"/\">\n                          <div className=\"app__feed\">\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><center><CircularProgress disableShrink /></center></div>}>\n                             <Feed/>\n                            </Suspense>\n                          </div>     \n                        </Route>                                                                                                               \n                        <Route path=\"/chats/:chatId\">\n                          <div className=\"app__chat\">\n                              {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                              <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                                <Chat/>\n                              </Suspense>\n                          </div>\n                          </Route>\n                        <Route path=\"/pals/:palId\">\n                          <div className=\"app__chat\">\n                              {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                              <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                                <UserProfile/>\n                              </Suspense>\n                          </div>\n                        </Route>    \n                        <Route path=\"/profile\">\n                          <div className=\"app__profile\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                                <Profile/>\n                            </Suspense>\n                          </div>\n                        </Route> \n                        <Route path=\"/createEvent\">\n                          <div className=\"app__createEvent\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                              <CreateEvent/>\n                            </Suspense>\n                          </div>\n                        </Route> \n                        <Route path=\"/createConfessions\">\n                          <div className=\"app__createConfessions\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                              <CreateConfessions/>\n                            </Suspense>\n                          </div>\n                        </Route> \n                        <Route path=\"/eventsFeed\">\n                          <div className=\"app__eventsFeed\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                              <FeedEvents/>\n                            </Suspense>\n                          </div>\n                        </Route> \n                        <Route path=\"/confessionsFeed\">\n                          <div className=\"app__confessionsFeed\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><center><CircularProgress disableShrink /></center></div>}>\n                              <FeedConfessions/>\n                            </Suspense>\n                          </div>\n                        </Route>\n                        <Route path=\"/ImageUploadMobile\">\n                          <div className=\"app__ImageUploadMobile\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                              <ImageUploadMobile username={user?.displayName}/>\n                            </Suspense>\n                          </div>\n                        </Route>  \n                        <Route path=\"/chatsFeed\">\n                          <div className=\"app__chatsFeed\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                              <center>CHATS</center>\n                              <WidgetsChat/>\n                            </Suspense>\n                          </div>\n                        </Route> \n                        <Route path=\"/share/posts/:postId\">\n                          <div className=\"app__sharingPosts\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                              <PostSharingContainer/>\n                            </Suspense>\n                          </div>\n                        </Route>\n                        <Route path=\"/share/confessions/:confessionId\">\n                          <div className=\"app__sharingPosts\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                              <ConfessionSharingContainer/>\n                            </Suspense>\n                          </div>\n                        </Route>\n                        <Route path=\"/share/events/:eventId\">\n                          <div className=\"app__sharingPosts\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                              <EventSharingContainer/>\n                            </Suspense>\n                          </div>\n                        </Route>\n                        <Route path=\"/searchMobile\">\n                          <div className=\"app__searchMobile\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                              <SearchMobile/>\n                            </Suspense>\n                          </div>\n                        </Route>\n                        <Route path=\"/yourposts/:postId\">\n                          <div className=\"app__yourposts\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                              <PostSharingContainer/>\n                            </Suspense>\n                          </div>\n                        </Route>  \n                    </Switch>\n\n                    {/*widgets*/}\n                  <Widgets id={'widget'}/>\n                  {/*Bottom Navigation only applicable to mobile screens*/}\n                  <BottomNavigationMobile/>\n                </Router>)\n        }\n\n{/* ======================================================================================================================================================= */}\n                                            {/*post upload*/}\n                {/*Added a conditional here because when the user is logged out user.displayName does not exists and react freaks out*/}\n                {/*this can be a bug for short term as we are just showing the Modal when the user is logged out and the missing imageUpload component will be visible*/}\n                {/*but when instead we will show the homepage it wont be a problem*/}\n                {user && <ImageUpload username={user.displayName}/>}\n       \n    </div>\n       \n    </div>\n  );\n}\n\nexport default App;\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/contexts/reducer.js",[],"/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/firebase.js",[],"/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/Widgets.js",["275"],"import React, { Suspense } from 'react'\nimport './Widgets.css'\nimport {useStateValue} from '../contexts/StateProvider'\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport Search from './Search'\n\nconst WidgetsChat = React.lazy(()=>import('./chat/WidgetsChat'))\nconst WigetsDummy  = React.lazy(()=>import('./chat/WigetsDummy'))\n\n\n\n\n\nfunction Widgets() {\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n\n    return (\n        <div className=\"widgets\"> \n            <div className=\"widgets__inputBox\">\n            <Search/>\n                {/* <Input style={{color:\"aliceblue\"}} className=\"widgets__input\" type= \"text\" placeholder=\"Search MyPal\" /> */}\n            </div>\n            <div className=\"widgets___widgetContainer\">\n                <center style={{color:'aliceblue'}}>CHATS</center>\n                {/* if user doesnt exists WidgetsChat component wasthrwoing an error hence I Made a dummy component which doesnt have a user object and \n                will be rendered during refresh transitions when momentarily user is unavailable instead of throwing an error  */}\n                {user?(<Suspense fallback={<Skeleton variant=\"rect\" width={100} height={500} />}><WidgetsChat/></Suspense>):(<Suspense fallback={<Skeleton variant=\"rect\" width={100} height={400} />}><WigetsDummy/></Suspense>)}\n            </div>\n        </div>\n    )\n}\n\n\n\nexport default Widgets\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/Home.js",[],"/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/SpeedDial.js",[],"/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/Profile.js",["276","277","278","279","280","281","282","283"],"import React, { useEffect, useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport './Profile.css'\nimport { Button, Input } from '@material-ui/core';\nimport { auth, DataBase } from './firebase';\nimport firebase from 'firebase/app'\nimport ScrollableTabsButtonAuto from './SwipeTab'\n\n\nconst useStyles = makeStyles((theme) => ({\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar:{\n        width: theme.spacing(15),\n        height: theme.spacing(15),\n        marginTop:10,\n        marginLeft:10,\n        marginBottom:10,\n        marginRight:10,\n      },\n}));\n\nfunction Profile() {\n//get user from firebase\nconst user = firebase.auth().currentUser\nconst classes = useStyles();\n//store the user fields from the database \nconst [userInfo,setUserInfo] = useState([])\n//store the number of posts inside posts collection\nconst [numberOfPosts, setNumberOfPosts] = useState(0)\n//show or hide edit options\nconst [showEditInput, setShowEditInput] = useState(false);\n//===========================================================================================\nuseEffect(() => {\n    //load the user info from Database on load or when user changes\n    const unsubscribe = DataBase.collection('users').doc(user?.uid).onSnapshot(snapshot=>{\n                                setUserInfo(snapshot.data());\n                                console.log(userInfo)\n    })\n\n                      //   DataBase.collection('users').doc(user.uid).collection('posts').onSnapshot(snapshot=>{\n                      //           setNumberOfPosts(snapshot.size)\n                      //   })\n    return () => {\n        unsubscribe()\n    }\n}, [,user])\n//displayName to edit the existing username\nconst [displayName,setDisplayName] = useState(user?.displayName);\n// edit bio\nconst [bio,setBio] = useState(userInfo?.bio);\nconsole.log(bio)\n\n//==================================================Log out =======================================\nconst logout = () => {\n    //remove the user from the local storage\n    // localStorage.setItem('user','null')\n    auth.signOut().then(() => {\n      console.log(\"sucessfully singned out\")\n    }).catch((error) => {\n      alert(error.message)\n    });\n    }\n//============================================================================================\n    //edit button event\n    const handleEditInputShow = () => {\n        setShowEditInput(true)\n    }\n    //save changes \n    const handleProfileUpdate = () => {\n        //if displayName is changed\n        if (user.displayName !== displayName){\n            user.updateProfile({\n            displayName: displayName,\n          }).then(function(result) {\n            console.log(result)\n          }).catch(function(err) {\n            alert(err.message)\n          });\n        }\n        //if bio is changed\n        else if (bio !== userInfo?.bio){\n            DataBase.collection('users').doc(user.uid).set({\n                bio:bio\n            })\n        }\n    //close edit mode\n    setShowEditInput(false)\n    }\n    return (\n        <div className=\"profile\">\n                    <div className=\"profile__header\">\n                        <div className=\"profile__headerTop\">\n                                <Avatar className={classes.avatar} alt={'username'} src=\"/static/images/avatar/1.jpg\" ></Avatar>\n                                <div className=\"profle__headerInfo\">\n                                    {/*if show edit input is true then show the input elements for edit else show normal elements*/}\n                                                {/*username*/}\n                                    {!showEditInput &&<Typography><b>{user?.displayName}</b></Typography>}\n                                                {/*username edit input box*/}\n                                    {showEditInput && <Input value={displayName} onChange={(e)=>{setDisplayName(e.target.value)}}/>}\n                                    <Typography>{`Joined on ${user?.metadata.creationTime.slice(0,17)}`}</Typography>\n                                </div>\n                            {/* <IconButton aria-label=\"settings\">\n                                <MoreVertIcon />\n                            </IconButton> */}\n                        </div>\n                                              {/*Edit button*/}\n                        <center className=\"profile__headerEditButton\">\n                            {!showEditInput &&<Button size=\"small\" onClick={handleEditInputShow}>Edit Profile</Button>}\n                                                {/*save changes button*/}\n                            <div className=\"profile__headerSaveButton\">\n                                {showEditInput && <Button size=\"small\"  id=\"saveButton\" variant=\"outlined\" color=\"primary\" onClick={handleProfileUpdate}>Save changes</Button>}\n                                {showEditInput && <Button size=\"small\"  id=\"discardButton\" color=\"primary\" onClick={()=>{setShowEditInput(false)}}>Discard changes</Button>}\n                            </div>\n                        </center>\n                        <div className=\"profile__headerTypography\">\n                                                {/*user bio*/}\n                            {!showEditInput && <Typography>{userInfo?.bio}</Typography>}\n                                                {/*user bio edit*/}\n                            {showEditInput && <Input value={bio} onChange={(e)=>{setBio(e.target.value)}}/>}\n                            <Typography>Interests</Typography>\n                        </div>\n\n                                            {/*log out button*/}\n                        <Button size=\"small\" className=\"profile__logoutButton\" onClick={logout}>Log out</Button>\n                    </div>\n                    <div className=\"profile__footer\">\n                           <ScrollableTabsButtonAuto/>\n                    </div>\n        </div>\n    )\n}\n\nexport default Profile\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/SearchMobile.js",[],"/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/imageUpload/ImageUpload.js",["284","285","286","287"],"import React,{useState,useContext} from 'react';\nimport {storage,DataBase} from '../firebase';\nimport firebase from 'firebase';\nimport './ImageUpload.css'\nimport {IconButton, Input, Modal} from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport {useStateValue} from '../../contexts/StateProvider'\nimport AlertDialog from '../AlertDialog';\n\nfunction ImageUpload({username}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //caption\n    const [caption,setCaption] = useState('');\n    //image \n    const [image,setImage] = useState(null);\n    //progress bar\n    const [progress,setProgress] = useState(0); \n    //open the modal \n    const [openProgress,setOpenProgress] = useState(false)\n    //open alert box when a new post is created\n    const [openAlert,setOpenAlert] = useState(false)\n    //post button enabled if image or caption is selected\n    const enabled =  caption!='' || image\n\n\n\n    //get the name of the first image file you selected (image as a file)\n    const handleChange = (e) =>{\n        if (e.target.files[0]){\n            setImage(e.target.files[0]);\n        }\n    }\n    const handleUpload = () =>{\n  //=============================={Upload the image to firebase database}========================\n            if (image) {\n            \n            //Access the storage and upolad the image in the 'images' folder and give it the name =image.name\n            const uploadTask = storage.ref(`images/${image.name}`).put(image)\n        \n            //listen to changes in the state of the upload\n            uploadTask.on(\n                \"state_changed\",\n                //keep track of the progress and give a snapshot each time\n                (snapshot) =>{\n\n                    //a number between 0 to 100 is stored in progress_ to keep track of the progress\n                    const progress_ = Math.round(\n                        (snapshot.bytesTransferred/snapshot.totalBytes)*100\n                    );\n                    setOpenProgress(true)\n                    setProgress(progress_)\n                },\n                //catch the error\n                (error) => {\n                    //because the error is not user friendly just log it to the console\n                    console.log(error)\n                    //show the error message\n                    alert(error.message)\n                }, \n\n//===================={get the uploaded image from the firebase database}========================\n\n                () => {\n                    storage\n                    //access the 'images' folder in the storage\n                    .ref('images')\n                    //get the name of the image file\n                    .child(image.name)\n                    //get the url to download the image\n                    .getDownloadURL()\n                    //add the image to the 'posts' folder of the database\n                    .then((url)=>{\n                        DataBase.collection('posts').add({\n                            //set the attribute to the time stamp of the server which serves the file\n                                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            //set the cation attribute to the cation user entered   \n                                caption:caption,\n                            //set image url attribute to the 'url' we got from the getDownloadURL() method\n                                imageUrl:url,\n                            //get the username as a prop from the 'App.js' file\n                                username:username,\n                            //post the id of the user from 'user' object  \n                                user_id:user.uid,\n                            //initially set likesCount to 0 \n                                likesCount:0\n                            })\n                            //once done set clear the input c\n                            setProgress(0);\n                            setOpenProgress(false)\n                            setCaption(\"\");\n                            setImage(null)\n                            \n\n                    })\n                    setOpenAlert(true)\n                }\n\n            )\n    }\n    else{\n        //if no image just text\n        console.log(\"No image selected\")\n        DataBase.collection('posts').add({\n            //set the attribute to the time stamp of the server which serves the file\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n            //set the cation attribute to the cation user entered   \n                caption:caption,\n            //set image url attribute to the 'url' we got from the getDownloadURL() method\n                imageUrl:'no-image',\n            //get the username as a prop from the 'App.js' file\n                username:username,\n            //post the id of the user from 'user' object  \n                user_id:user.uid,\n            //initially set likesCount to 0 \n                likesCount:0\n            })\n\n            setCaption(\"\");\n            setOpenAlert(true)\n    }\n}\n\n    return (\n        <div className=\"imageUpload\">\n\n                                                        {/*Modal for progress of upload*/}\n                <Modal  imageUpload__progressModal=\"imageUpload__progressModal\" open={openProgress} onClose={()=>{setOpenProgress(false)}}> \n                                                                        {/*progress bar*/}\n                        <LinearProgress  variant=\"determinate\" className=\"imageUpload__uploadProgress\" value={progress} max=\"100\"/>\n                </Modal>\n\n                <AlertDialog text={\"New post is up!\"}  openAlert={openAlert} changeAlert={al=>{setOpenAlert(al)}}/>\n                                                        {/*post upload form */}\n            <div className=\"imageUpload__form\">\n                <form onSubmit={(e)=>{e.preventDefault()}}>\n                        {/*input the image and caption from the user*/}\n                                                                {/*image input*/}\n                        <input className=\"imageUpload__fileInput\" accept=\"image/*\" id=\"image-button-file\" type=\"file\" placeholder=\"Choose a file\" onChange={handleChange} />\n                        <label htmlFor=\"image-button-file\">\n                            <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n                                <AddPhotoAlternateIcon/>\n                            </IconButton>\n                        </label>\n                                                            {/*selected image preview*/}\n                        {image&&(<img className=\"imageUpload__preview\" width=\"20px\" height=\"20px\" src={URL.createObjectURL(image)}/>)}\n                                                             {/*image caption*/}\n                        <Input style={{color:\"aliceblue\"}}  className=\"imageUpload__caption\" type=\"text\" placeholder=\"Enter a caption for the new post...\" onChange={(e)=>setCaption(e.target.value)} value={caption}/>\n                        <IconButton className=\"imageUpload___iconButton\" disabled = {!enabled} variant ='contained' color=\"primary\" type ='submit' onClick={handleUpload}>\n                            <SendIcon/>\n                        </IconButton>\n                </form>\n           </div>\n        </div>\n    )\n}\n\nexport default ImageUpload;\n\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/imageUpload/ImageUploadMobile.js",["288","289","290"],"import React, { useState } from \"react\";\nimport { storage, DataBase } from \"../firebase\";\nimport firebase from \"firebase\";\nimport \"./ImageUploadMobile.css\";\nimport { Button, IconButton, Input, Modal } from \"@material-ui/core\";\nimport AddPhotoAlternateIcon from \"@material-ui/icons/AddPhotoAlternate\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport { useStateValue } from \"../../contexts/StateProvider\";\nimport AlertDialog from \"../AlertDialog\";\n\nfunction ImageUploadMobile({ username }) {\n  //get the user from the provider\n  const [{ user }, dispatch] = useStateValue();\n  //caption\n  const [caption, setCaption] = useState(\"\");\n  //image\n  const [image, setImage] = useState(null);\n  //progress bar\n  const [progress, setProgress] = useState(0);\n  //open the modal\n  const [openProgress, setOpenProgress] = useState(false);\n  //open alert box when a new post is created\n  const [openAlert, setOpenAlert] = useState(false);\n  //post button enabled if image or caption is selected\n  const enabled = caption != \"\" || image;\n\n  //get the name of the first image file you selected (image as a file)\n  const handleChange = (e) => {\n    if (e.target.files[0]) {\n      setImage(e.target.files[0]);\n    }\n  };\n  const handleUpload = () => {\n    //=============================={Upload the image to firebase database}========================\n    if (image) {\n      //Access the storage and upolad the image in the 'images' folder and give it the name =image.name\n      const uploadTask = storage.ref(`images/${image.name}`).put(image);\n\n      //listen to changes in the state of the upload\n      uploadTask.on(\n        \"state_changed\",\n        //keep track of the progress and give a snapshot each time\n        (snapshot) => {\n          //a number between 0 to 100 is stored in progress_ to keep track of the progress\n          const progress_ = Math.round(\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n          );\n          setOpenProgress(true);\n          setProgress(progress_);\n        },\n        //catch the error\n        (error) => {\n          //because the error is not user friendly just log it to the console\n          console.log(error);\n          //show the error message\n          alert(error.message);\n        },\n\n        //===================={get the uploaded image from the firebase database}========================\n\n        () => {\n          storage\n            //access the 'images' folder in the storage\n            .ref(\"images\")\n            //get the name of the image file\n            .child(image.name)\n            //get the url to download the image\n            .getDownloadURL()\n            //add the image to the 'posts' folder of the database\n            .then((url) => {\n              DataBase.collection(\"posts\").add({\n                //set the attribute to the time stamp of the server which serves the file\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                //set the cation attribute to the cation user entered\n                caption: caption,\n                //set image url attribute to the 'url' we got from the getDownloadURL() method\n                imageUrl: url,\n                //get the username as a prop from the 'App.js' file\n                username: username,\n                //post the id of the user from 'user' object\n                user_id: user.uid,\n                //initially set likesCount to 0\n                likesCount: 0,\n              });\n              //once done set clear the input c\n              setProgress(0);\n              setOpenProgress(false);\n              setCaption(\"\");\n              setImage(null);\n            });\n\n          setOpenAlert(true);\n        }\n      );\n    } else {\n      //if no image just text\n      console.log(\"No image selected\");\n      DataBase.collection(\"posts\").add({\n        //set the attribute to the time stamp of the server which serves the file\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        //set the cation attribute to the cation user entered\n        caption: caption,\n        //set image url attribute to the 'url' we got from the getDownloadURL() method\n        imageUrl: \"no-image\",\n        //get the username as a prop from the 'App.js' file\n        username: username,\n        //post the id of the user from 'user' object\n        user_id: user.uid,\n        //initially set likesCount to 0\n        likesCount: 0,\n      });\n      setCaption(\"\");\n      setOpenAlert(true);\n    }\n  };\n\n  return (\n    <div className=\"imageUploadMobile\">\n      {/*Modal for progress of upload*/}\n      <Modal\n        imageUpload__progressModal=\"imageUploadMobile__progressModal\"\n        open={openProgress}\n        onClose={() => {\n          setOpenProgress(false);\n        }}\n      >\n        {/*progress bar*/}\n        <LinearProgress\n          variant=\"determinate\"\n          className=\"imageUploadMobile__uploadProgress\"\n          value={progress}\n          max=\"100\"\n        />\n      </Modal>\n\n      <AlertDialog\n        text={\"New post is up!\"}\n        openAlert={openAlert}\n        changeAlert={(al) => {\n          setOpenAlert(al);\n        }}\n      />\n\n      {/*post upload form */}\n      <div className=\"imageUploadMobile__form\">\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n          }}\n        >\n          {/*input the image and caption from the user*/}\n          {/*image input*/}\n          <input\n            className=\"imageUploadMobile__fileInput\"\n            accept=\"image/*\"\n            id=\"image-button-file\"\n            type=\"file\"\n            placeholder=\"Choose a file\"\n            onChange={handleChange}\n          />\n          <label style={{ color: \"gray\" }} htmlFor=\"image-button-file\">\n            <IconButton\n              color=\"primary\"\n              aria-label=\"upload picture\"\n              component=\"span\"\n            >\n              <AddPhotoAlternateIcon />\n            </IconButton>\n            {image ? \"Image selected\" : \"Choose an image to post\"}\n          </label>\n          {/*selected image preview*/}\n          {image && (\n            <img\n              className=\"imageUploadMobile__preview\"\n              width=\"80px\"\n              height=\"80px\"\n              src={URL.createObjectURL(image)}\n            />\n          )}\n          {/*image caption*/}\n          <Input\n            style={{ color: \"aliceblue\" }}\n            className=\"imageUploadMobile__caption\"\n            type=\"text\"\n            placeholder=\"Enter a caption for the new post...\"\n            onChange={(e) => setCaption(e.target.value)}\n            value={caption}\n          />\n          <Button\n            className=\"imageUploadMobile___iconButton\"\n            disabled={!enabled}\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            onClick={handleUpload}\n          >\n            POST\n          </Button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default ImageUploadMobile;\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/navigation/Sidebar.js",["291","292","293","294","295","296"],"import React from 'react'\n//Get material-ui icons\nimport SidebarOptions from './SidebarOptions'\nimport SearchIcon from '@material-ui/icons/Search';\nimport HomeIcon from '@material-ui/icons/Home';\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\nimport WhatshotSharpIcon from '@material-ui/icons/WhatshotSharp';\nimport EventIcon from '@material-ui/icons/Event';\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport {Button} from '@material-ui/core';\nimport './Sidebar.css'\nimport { BrowserRouter as Router,Link} from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  root: {\n    background: 'rgb(86,108,183)',\n    transition: \"background 1s\",\n    background: 'linear-gradient(90deg, rgba(86,108,183,0.9290091036414566) 39%, rgba(190,185,249,1) 100%)',\n    border: 'none',\n    color: 'aliceblue',\n    fontWeight: '900',\n    textTransform: 'inherit',\n    borderRadius: '30px',\n    height: '50px !important',\n    marginTop: '20px !important',\n  },\n});\n\nfunction Sidebar() {\n    const classes = useStyles();\n    return (\n        <div className=\"sidebar\">\n            {/*pass icons as props to SidebarOptions component*/}\n            {/*keep i captial of Icon to let react know you are passing a component*/}\n            <Link to='/' style={{ textDecoration: 'none' }}><SidebarOptions active text=\"Home\" Icon={HomeIcon}/></Link>\n            {/* <SidebarOptions text=\"Explore\" Icon={SearchIcon}/> */}\n            <Link to='/eventsFeed' style={{ textDecoration: 'none' }}><SidebarOptions text=\"Events\" Icon={EventIcon}/></Link>\n            <Link to='/confessionsFeed' style={{ textDecoration: 'none' }}><SidebarOptions text=\"Confessions\" Icon={WhatshotSharpIcon}/></Link>\n            {/* <SidebarOptions text=\"Notifications\" Icon={NotificationsNoneIcon}/> */}\n            {/* <SidebarOptions text=\"Messages\" Icon={MailOutlineIcon}/> */}\n            <Link to='/profile' style={{ textDecoration: 'none' }}><SidebarOptions text=\"Bookmarks\" Icon={BookmarkBorderIcon}/></Link>\n            {/* <SidebarOptions text=\"More\" Icon={MoreHorizIcon}/> */}\n            <div className=\"sidebar__buttons\">\n            <Link to='/createEvent' style={{ textDecoration: 'none' }}><Button variant=\"outlined\"  className={classes.root} fullWidth>New event</Button></Link>\n            <Link to='/createConfessions'  style={{ textDecoration: 'none' }}><Button variant=\"outlined\"   className={classes.root}  fullWidth>Write an annonymous confession</Button></Link>\n            </div>\n        </div>\n    )\n}\n\nexport default Sidebar\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/navigation/BottomNavigationMobile.js",["297","298","299"],"import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport EventIcon from '@material-ui/icons/Event';\nimport CommentRoundedIcon from '@material-ui/icons/CommentRounded';\nimport HomeIcon from '@material-ui/icons/Home';\nimport './BottomNavigationMobile.css'\nimport WhatshotSharpIcon from '@material-ui/icons/WhatshotSharp';\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\nimport { Paper } from '@material-ui/core';\nimport {BrowserRouter, Link } from 'react-router-dom';\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: '#1A1A1A',\n  },\n});\n\nconst navValues = {\n  '/':1,\n  '/confessionsFeed':2,\n  '/eventsFeed':3,\n  '/chatsFeed':4,\n  '/notificationsFeed':5\n}\n\n//BUG:\n// here everytime we change the value using setValue it causes one additional render\nfunction BottomNavigationMobile() {\n    const classes = useStyles();\n    const [value, setValue] = React.useState('Home');\n    const handleChange = (event, newValue) => {\n      setValue(newValue);\n    };\n    return (\n      <Paper elevation={10}>\n        <div className=\"bottomNavigation\" style={{position:'fixed'}}> \n            <BottomNavigation value={value} onChange={handleChange} className={classes.root}>\n            <BottomNavigationAction component={Link} to ='/' value=\"Home\"  label=\"Home\"  icon={<HomeIcon/>} />\n            <BottomNavigationAction component={Link} to= '/confessionsFeed' value=\"Confessions\" label=\"Confessions\" icon={<WhatshotSharpIcon/>} />\n            <BottomNavigationAction component={Link} to='/eventsFeed' value=\"Events\" label=\"Events\"  icon={<EventIcon/>} />\n            <BottomNavigationAction component={Link} to= '/chatsFeed' value=\"Chats\"  label=\"Chats\"  icon={<CommentRoundedIcon />} />\n            <BottomNavigationAction component={Link} to= '/notificationsFeed' value=\"Notifications\" label=\"Notifications\"  icon={ <NotificationsNoneIcon/>} />\n            </BottomNavigation>\n        </div>\n      </Paper>\n    )\n}\n\nexport default BottomNavigationMobile\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/chat/SendMessage.js",["300","301"],"import React, { useEffect, useRef, useState } from 'react'\nimport {IconButton, Input } from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport firebase from 'firebase/app'\nimport 'emoji-mart/css/emoji-mart.css';\nimport {useStateValue} from '../../contexts/StateProvider';\nimport {InsertEmoticon, MicOutlined} from '@material-ui/icons';\nimport {realtime} from '../firebase';\nimport './SendMessage.css'\nimport EmojiSelect from './EmojiSelect';\n\n\nfunction SendMessage({chatId}) {\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    //set the input \n    const [input, setInput] = useState('');\n    //show/hide emoji picker menu\n    const [emoMenuVisible,setEmoMenuVisible] = useState(false)\n    //ref to input to focus on the input element after selecting the emoji \n    const inputRef = useRef();\n    //current element of inputRef\n    const inputRefCurrent = inputRef.current\n\n    //empty input and focus on the input everytime a new chatId is opened\n    useEffect(() => {\n        setInput('')\n        inputRef.current.focus();\n    }\n    ,[chatId])\n    \n\n//========================================================POST Messages========================================\nconst sendMessage = () => {\n    if (user){\n                   //add message to user1's database (sender)\n                   realtime\n                   .ref(`/'messages'/${user.uid}/${chatId}`)\n                   //push create a unique id for each new doc \n                   .push({\n                       text:input,\n                       timestamp:firebase.database.ServerValue.TIMESTAMP,\n                       author:user.uid,\n                       authorName:user.displayName,\n                       imageUrl:\"\",},\n                       (error) => {\n                       if (error) {\n                       alert(error.message)\n                       } else {\n                       //successful!!\n                       }         \n                   })\n                   //add message to user2's database (sendee)\n                   //add to realtime db \n                       realtime\n                       .ref(`/'messages'/${chatId}/${user.uid}`)\n                       //push create a unique id for each new doc \n                       .push({     \n                               text:input,\n                               timestamp:firebase.database.ServerValue.TIMESTAMP,\n                               author:user.uid,\n                               authorName:user.displayName,\n                               imageUrl:\"\",\n                           },\n                           (error) => {\n                           if (error) {\n                           alert(error.message)\n                           } else {\n                           //successful!!\n                           }\n                       \n                       })\n                    //post the time at which we sent a text to that user/received a text from that user lately\n                    realtime.ref(`/'chats'/${user.uid}/${chatId}`).update(\n                        {\n                            lastchatAt:firebase.database.ServerValue.TIMESTAMP\n                        }\n                    )\n                    realtime.ref(`/'chats'/${chatId}/${user.uid}`).update(\n                        {\n                            lastchatAt:firebase.database.ServerValue.TIMESTAMP\n                        }\n                    )\n                    \n\n        setInput('');\n    }\n}\n\n//=============================================================================================================\n    return (\n    <div className=\"sendMessage\">\n                                                                {/*emoji select menu*/}\n                                            {/*make the menu visible only when user clicks on emoji icon*/}\n                                            {/*send the reference of the input component to <EmojiSelect/> to .focus() after emoji is selected*/}\n\n                {emoMenuVisible?\n                    (<EmojiSelect inputRefCurrent={inputRefCurrent} addEmojiToInput={(emoji)=>{setInput(input+emoji)}}  EmojiMenuVisibility={(visibility)=>{setEmoMenuVisible(visibility)}} />):(<></>)\n                }\n            <form className=\"chat__inputForm\" onSubmit={(e)=>{e.preventDefault()}}>\n                <InsertEmoticon className=\"sendMessage__emojiIcon\" onClick={()=>{setEmoMenuVisible(!emoMenuVisible)}} style={{cursor: 'pointer'}}/>\n                <Input inputRef={inputRef} style={{color:\"aliceblue\"}} className=\"sendMessage__input\" value={input} onChange={(e)=>setInput(e.target.value)} type=\"text\" placeholder=\"   Send a texx...\"/>\n                <IconButton  variant ='contained' color=\"primary\"disabled={!input} onClick={sendMessage} type=\"submit\"><SendIcon /></IconButton>\n                {/* <MicOutlined/> */}\n            </form>\n    </div>\n    )\n}\n\nexport default SendMessage\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/chat/WidgetsChat.js",["302","303","304","305","306"],"\n//users in sidebar chat (online/offline)\n\nimport React, { Suspense, useEffect, useState } from 'react'\nimport './WidgetsChat.css'\nimport { makeStyles} from '@material-ui/core/styles';\nimport {Link} from 'react-router-dom';\nimport {DataBase, realtime} from '../firebase'\nimport {useStateValue} from '../../contexts/StateProvider';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport FlipMove from 'react-flip-move';\n\nconst WidgetMember = React.lazy(() => import('./WidgetMember'))\n//==================================================Card Styles==============================================\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flex:1,\n    display: 'flex',\n    minWidth:  314,\n    height:60,\n    background: '#1A1A1A',\n    '&:hover': {\n       background: '#363A3E',\n    },\n    border:'1px grey',\n    marginBottom:'2px',\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    Bottom:'20px',\n    fontWeight:300,\n    color: 'white',\n    marginBottom:10,\n  },\n  avatar:{\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    marginTop:10,\n    marginLeft:10,\n    marginBottom:10,\n  },\n  typoStatus:{\n    color:'grey',\n  }\n\n}));\n//==================================================================================================================\nfunction WidgetsChat() {\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    const classes = useStyles();\n    const [chats, setChats] = useState([])\n    \n    useEffect(() => {\n        //if user is logged out it throws an error hence using try catch\n        try {\n        // console.log(chats)\n\n          //get the username of the person we are chatting with \n          realtime.ref(`/'chats'/${user.uid}`).orderByChild('lastchatAt').on('value', (snapshot) => {\n                //store chats of the particular user\n                const chatsArray = [] \n            if (snapshot.exists()){\n                snapshot.forEach((child)=>{\n                  chatsArray.push(child.val())\n                })\n                // console.log(snapshot.val())\n                // console.log(chatsArray)\n\n                //.orderByChild works in ascending order\n                //we want in descending order hence reverse tha array\n                setChats(chatsArray.reverse())\n\n            // setChats(snapshot.val())\n            }\n        });\n           \n        }\n        catch (error) {\n            console.log(error.message+\" coming from widgetsChat getting 'chats'collection \")\n            }\n    }, [,user,chats.length]);\n    // console.log(chats)\n\n\n    return (\n//==========================================ALL CHATS LIST===========================================================\n        <div className=\"widgetsChat\">\n          {chats.length!==0 &&  \n                (chats.map((chat)=>(\n                    <Suspense fallback={\n                        <div>\n                        <Skeleton variant=\"circle\" width={40} height={40} />\n                        <Skeleton variant=\"rect\" width={210} height={50} /></div>} key={chat.key}>\n                      \n                        <Link to={`/chats/${chat.chat_user_id}`} style={{ textDecoration: 'none' }}>\n                          <WidgetMember lastchatAt={chat.lastchatAt} chatId={chat.chat_user_id} chat_username= {chat.chat_username} />\n                        </Link>\n\n                        {/* {console.log(chat.chat_user_id)} */}\n                    </Suspense>\n                ))\n            )\n            }            \n        </div>\n    )\n}\n\nexport default WidgetsChat\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/feed/FeedConfessions.js",["307"],"import React, { useEffect, useState, Suspense } from 'react'\nimport {DataBase} from '../firebase'\nimport {useStateValue} from '../../contexts/StateProvider'\nimport Skeleton from '@material-ui/lab/Skeleton';\n\n\nconst Confessions = React.lazy(()=>import('../confessions/Confessions'))\nfunction FeedConfessions(){\n\n//get the user from the provider\nconst [{user}, dispatch] = useStateValue();\n//confessions array\nconst [confessions, setConfessions] = useState([]);\n//====================================Post changes listner=========================================\n    useEffect( () => {\n        //onSnapshot = listner to changes in posts \n        //everytime the posts change run this code\n        //grab the collection 'posts' from the database and order 'docs' in the collection by timestamp\n        DataBase.collection('confessions').orderBy('timestamp','desc').onSnapshot(snapshot =>{\n        //Now set the  id=doc.id and post=doc.data to the fields in the 'posts' variable that we defined above\n        setConfessions(snapshot.docs.map(doc =>({id:doc.id,confession:doc.data()})))\n            })\n    },[user]);\n    return (\n    <div className=\"feedConfessions \">\n            <div className=\"feedConfessions__confessions \"> \n                 {\n                //render only those posts by id who are newly added to the database dont render the entire post list  \n                confessions.map(({id,confession})=>(\n                    <Suspense fallback={\n                        <div><Skeleton variant=\"text\" />\n                        <Skeleton variant=\"circle\" width={40} height={40} />\n                        <Skeleton variant=\"rect\" width={210} height={118} /></div>} key={id}>\n                            <Confessions confessionId={id} confession={confession.confession}  timeInMillis={confession?.timestamp?.seconds * 1000} likesCount={confession.likesCount}/>\n                    </Suspense>\n                ))\n                } \n            </div>    \n    </div>\n    )\n}\n\nexport default FeedConfessions\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/feed/Feed.js",["308"],"import React, { Suspense, useEffect, useState } from 'react'\nimport {DataBase} from '../firebase'\nimport {useStateValue} from '../../contexts/StateProvider'\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nfunction Feed(){\n\n//get the user from the provider\nconst [{user}, dispatch] = useStateValue();\n//posts array\nconst [posts, setPosts] = useState([]);\n//lazy loading\nconst Post = React.lazy(() => import('../posts/Post'))\n//====================================Post changes listner=========================================\n    useEffect( () => {\n        //onSnapshot = listner to changes in posts \n        //everytime the posts change run this code\n        //grab the collection 'posts' from the database and order 'docs' in the collection by timestamp\n        DataBase.collection('posts').orderBy('timestamp','desc').onSnapshot(snapshot =>{\n        //Now set the  id=doc.id and post=doc.data to the fields in the 'posts' variable that we defined above\n        setPosts(snapshot.docs.map(doc =>({id:doc.id,post:doc.data()})))\n            })\n\n\n        \n    },[user]);\n    return (\n    <div className=\"feed\">\n                 {\n                //render only those posts by id who are newly added to the database dont render the entire post list  \n                posts.map(({id,post})=>(\n                <Suspense fallback={\n                    <div><Skeleton variant=\"text\" />\n                    <Skeleton variant=\"circle\" width={40} height={40} />\n                    <Skeleton variant=\"rect\" width={210} height={118} /></div>} key={id}>\n                        <Post postId={id} username={post.username} user_id={post.user_id} caption={post.caption} imageUrl={post.imageUrl} timeInMillis={post?.timestamp?.seconds * 1000} likesCount={post.likesCount}>\n                        </Post>\n                </Suspense>))\n                }    \n    </div>\n    )\n}\n\nexport default Feed\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/chat/Chat.js",["309","310"],"import React, { useEffect, useRef, useState } from 'react'\nimport './Chat.css'\nimport {realtime} from '../firebase';\nimport {useStateValue} from '../../contexts/StateProvider';\nimport { useParams } from 'react-router-dom';\nimport SendMessage from './SendMessage'\nimport { Suspense } from 'react';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\n\n\n\nconst Message = React.lazy(()=>import('./Message'))\nfunction Chat() {\n    //set the chat name in the\n    const [chatName,setChatName] = useState('')\n    //get the messages from the database\n    const [messages,setMessages] = useState([])\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    //get the slug from the url  (remeber that component using useParams should be inside <Router>)\n    const {chatId} = useParams()\n    //\n    const messageScrollRef = useRef()\n\n//======================================================GET Messages==========================================\n//everytime chat_user_id (which is basically the doc id inside the chat collection) changes pull the messages for that chat_user_id from the database\nuseEffect(() => {\n    if (user){\n    if (chatId){\n    \n            //here the chat_user_id (chatId) is taken from the user (user.uid) who posted that particular post to database\n            const messagesArray = [];\n            realtime.ref(`/'messages'/${user.uid}/${chatId}`).orderByChild('timestamp').on('value', (snapshot) => {\n                //get all the messages for that particular chatId\n    \n                snapshot.forEach((child)=>{\n                    messagesArray.push(child.val())\n                })\n                setMessages(messagesArray)\n                // console.log(\"messages array \"+ messagesArray)\n                \n                });\n\n                //get the username of the person we are chatting with \n                realtime.ref(`/'chats'/${user.uid}/${chatId}`).on('value', (snapshot) => {\n                if (snapshot.exists()){\n                    // console.log(snapshot.val())\n                setChatName(snapshot.val())\n                }\n            });\n\n            return () => {\n                //unsubscribe to the database\n                realtime.ref(`/'messages'/${user.uid}/${chatId}`).off()\n                realtime.ref(`/'chats'/${user.uid}/${chatId}`).off()\n            }\n      \n    }\n\n\n}\n //when chatId changes/messages are added/page is re-rendered  run this   \n}, [,user,chatId,messages])\n\n//scroll to bottom when new messages are added.\nuseEffect(() => {\n        const scroll =\n        messageScrollRef.current.scrollHeight -\n        messageScrollRef.current.clientHeight;\n        messageScrollRef.current.scrollTo(0, scroll);\n        console.log(messageScrollRef.current.scrollHeight,messageScrollRef.current.clientHeight,scroll)\n    }\n    //using messages.length because firebase is constantly fetching messages from realtime db which changes messages state constantly\n    //but messages.length only changes when a new message is added\n,[messages.length])\n\n\n//=============================================================================================================\n\n    return (                         \n             <div className=\"chat\">\n                        <center>\n                        This is the beggining of your texx with  {chatName.chat_username}\n                        </center>\n                        <div className=\"chat__messages\" ref={messageScrollRef}>\n                        {\n                            messages.map((message)=>(\n                                <Suspense fallback={\n                                    <div><Skeleton variant=\"rect\" width={400} height={10} />\n                                    <Skeleton variant=\"rect\" width={400} height={10} />\n                                    <Skeleton variant=\"rect\" width={400} height={10} />\n                                    <Skeleton variant=\"rect\" width={400} height={10} />\n                                    <Skeleton variant=\"rect\" width={400} height={10} />\n                                    <Skeleton variant=\"rect\" width={400} height={10} />\n                                    <Skeleton variant=\"rect\" width={400} height={10} />\n                                    </div>} key={message.key}>\n                                        <Message message={message} key={message.key}/>\n                                </Suspense>\n                                ))\n                            \n                        }\n                        </div>\n                <div className=\"chat__sendMessage\">\n                    <SendMessage chatId={chatId} />\n                </div>\n             </div> \n             \n\n\n    )\n}\n\nexport default Chat\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/feed/FeedEvents.js",["311"],"import React, { useEffect, useState } from 'react'\nimport {DataBase} from '../firebase'\nimport {useStateValue} from '../../contexts/StateProvider'\nimport './FeedEvents.css'\nimport { Suspense } from 'react'\nimport Skeleton from '@material-ui/lab/Skeleton'\n\nconst Event = React.lazy(()=>import('../events/Event'))\nfunction FeedEvents() {\n\n//get the user from the provider\nconst [{user}, dispatch] = useStateValue();\n//events array\nconst [events, setEvents] = useState([]);\n//====================================Events changes listner=========================================\n    useEffect( () => {\n        //onSnapshot = listner to changes in posts \n        //everytime the posts change run this code\n        //grab the collection 'events' from the database and order 'docs' in the collection by timestamp\n        DataBase.collection('events').orderBy('timestamp','desc').onSnapshot(snapshot =>{\n        //Now set the  id=doc.id and event=doc.data to the fields in the 'event' variable that we defined above\n        console.log(snapshot.docs.map(doc =>({id:doc.id,event:doc.data()})))\n        setEvents(snapshot.docs.map(doc =>({id:doc.id,event:doc.data()})))\n            })\n    \n        return \n\n    \n    },[user]);\n    return (\n    <div className=\"feedEvents\">\n            <div className=\"feedEvents__events\"> \n                 {\n                //render only those posts by id who are newly added to the database dont render the entire post list  \n                events.map(({id,event})=>(\n                    <Suspense fallback={\n                        <div><Skeleton variant=\"text\" />\n                        <Skeleton variant=\"circle\" width={40} height={40} />\n                        <Skeleton variant=\"rect\" width={210} height={118} /></div>} key={id}>\n                            <Event key={event.id} eventId={id} dateTime={event.dateTime} venue={event.venue} title={event.title} username={event.username} user_id={event.user_id} description={event.description} imageUrl={event.imageUrl} interestedCount={event.interestedCount}/>\n                    </Suspense>\n                ))\n                } \n            </div>    \n    </div>\n    )\n}\n\nexport default FeedEvents\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/events/EventSharingContainer.js",["312","313","314"],"import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useStateValue } from \"../../contexts/StateProvider\";\nimport Event from \"./Event\";\nimport { DataBase } from \"../firebase\";\nimport \"../posts/PostSharingContainer.css\";\n\nfunction EventSharingContainer() {\n  //get the slug from the url  (remeber that component using useParams should be inside <Router>)\n  const { eventId } = useParams();\n  //get the user from the provider\n  const [{ user }, dispatch] = useStateValue();\n  const [eventToShare, setEventToShare] = useState([]);\n  //====================================Event changes listner=========================================\n  useEffect(() => {\n    //onSnapshot = listner to changes in Event\n    //everytime the Event change run this code\n    //grab the collection 'Events' from the database with doc = eventId\n    DataBase.collection(\"confessions\")\n      .doc(eventId)\n      .get()\n      .then((doc) => {\n        setEventToShare(doc.data());\n        console.log(eventToShare);\n      })\n      .catch((err) => alert(err));\n  }, [, user, eventId]);\n  return (\n    <div className=\"postSharingContainer\">\n      <Event\n        eventId={eventId}\n        title={eventToShare.title}\n        venue={eventToShare.venue}\n        username={eventToShare.username}\n        imageUrl={eventToShare.imageUrl}\n        dateTime={eventToShare.dateTime}\n        interestedCount={eventToShare.interestedCount}\n        user_id={eventToShare.user_id}\n        description={eventToShare.description}\n      />\n    </div>\n  );\n}\n\nexport default EventSharingContainer;\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/events/CreateEvent.js",["315","316"],"import React,{Suspense, useState} from 'react';\nimport {storage,DataBase} from '../firebase';\nimport firebase from 'firebase';\nimport {Button, IconButton, Input, Modal,TextField} from '@material-ui/core';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport {useStateValue} from '../../contexts/StateProvider'\nimport './CreateEvent.css'\nimport AlertDialog from '../AlertDialog'\nimport Skeleton from '@material-ui/lab/Skeleton';\nconst DateTimeSelect = React.lazy(()=>import('../DateTimeSelect')) \n\nfunction CreateEvent() {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //description\n    const [description,setDescription] = useState('');\n    //image \n    const [imageThumbnail,setImageThumbnail] = useState(false);\n    //progress bar\n    const [progress,setProgress] = useState(0); \n    //open the modal \n    const [openProgress,setOpenProgress] = useState(false)\n    //title \n    const [title,setTitle] = useState('')\n    //venue/link\n    const [venue,setVenue] = useState('')\n    //Datetime\n    const [dateTime,setdateTime] = useState(new Date())\n    //open alert box when a new event is created\n    const [openAlert,setOpenAlert] = useState(false)\n\n    console.log(openAlert)\n    //get the name of the first image file you selected (image as a file)\n    const handleImageChange = (e) =>{\n        if (e.target.files[0]){\n            setImageThumbnail(e.target.files[0]);\n        }\n    }\n    const handleUpload = () =>{\n  //=============================={Upload the image to firebase database}========================\n            if (imageThumbnail) {\n            \n            //Access the storage and upolad the image in the 'eventThumbnails' folder and give it the name =image.name\n            const uploadTask = storage.ref(`eventThumbnails/${imageThumbnail.name}`).put(imageThumbnail)\n        \n            //listen to changes in the state of the upload\n            uploadTask.on(\n                \"state_changed\",\n                //keep track of the progress and give a snapshot each time\n                (snapshot) =>{\n\n                    //a number between 0 to 100 is stored in progress_ to keep track of the progress\n                    const progress_ = Math.round(\n                        (snapshot.bytesTransferred/snapshot.totalBytes)*100\n                    );\n                    setOpenProgress(true)\n                    setProgress(progress_)\n                },\n                //catch the error\n                (error) => {\n                    //because the error is not user friendly just log it to the console\n                    console.log(error)\n                    //show the error message\n                    alert(error.message)\n                }, \n\n//===================={get the uploaded image from the firebase database}========================\n\n                () => {\n                    storage\n                    //access the 'eventThumbnails' folder in the storage\n                    .ref('eventThumbnails')\n                    //get the name of the image file\n                    .child(imageThumbnail.name)\n                    //get the url to download the image\n                    .getDownloadURL()\n                    //add the image to the 'posts' folder of the database\n                    .then((url)=>{\n                        DataBase.collection('events').add({\n                            //set the attribute to the time stamp of the server which serves the file\n                                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            //set title\n                                title:title,\n                            //set date amd time\n                                dateTime:dateTime,\n                            //set venue\n                                venue:venue,\n                            //set the description attribute to the description user entered   \n                                description:description,\n                            //set image url attribute to the 'url' we got from the getDownloadURL() method\n                                imageUrl:url,\n                            //get the username as a prop from the 'App.js' file\n                                username:user.displayName,\n                            //post the id of the user from 'user' object  \n                                user_id:user.uid,\n                            //initially set interestedCount to 0 \n                                interestedCount:0\n                            })\n                            //once done set clear the input c\n                            setProgress(0);\n                            setOpenProgress(false)\n                            setTitle(\"\")\n                            setDescription(\"\");\n                            setVenue(\"\")\n                            setImageThumbnail(null)\n                            \n                            \n                            \n                            \n\n                    })\n                    setOpenAlert(true)\n\n                }\n\n            )\n    }\n    else{\n        alert(\"No image selected\")\n    }\n}\n\n    return (\n        <div className=\"createEventWrapper\">\n            <h2 id=\"createEvent_h2\"> CREATE EVENT </h2>\n        <div className=\"createEvent\">\n                                                         \n\n                                                        {/*Modal for progress of upload*/}\n                <Modal  imageUpload__progressModal=\"createEvent__progressModal\" open={openProgress} onClose={()=>{setOpenProgress(false)}}> \n                                                                        {/*progress bar*/}\n                        <LinearProgress  variant=\"determinate\" className=\"createEvent__uploadProgress\" value={progress} max=\"100\"/>\n                </Modal>\n                <AlertDialog text={\"Your new event is up!\"} openAlert={openAlert} changeAlert={al=>{setOpenAlert(al)}}/>\n\n                                                        {/*post upload form */}\n            <div className=\"createEvent_formContainer\">\n                <form className=\"createEvent__form\" onSubmit={(e)=>{e.preventDefault()}}>\n                        {/*input the image and caption from the user*/}\n                        <Input style={{color:\"aliceblue\"}}  className=\"createEvent__title\" type=\"text\" placeholder=\"Enter a the name for the event...\" onChange={(e)=>setTitle(e.target.value)} value={title}/>\n                        {/*if image is selected then show selected else show choose an image*/}\n                        <input className=\"createEvent__fileInput\" accept=\"image/*\"  id=\"imageThumbnail-button-file\" type=\"file\" onChange={handleImageChange} />\n                        <label htmlFor=\"imageThumbnail-button-file\" style={{color:\"gray\"}}>\n                            <IconButton color=\"primary\" aria-label=\"upload thumbnail\" component=\"span\">\n                                <AddPhotoAlternateIcon /> \n                            </IconButton>\n                            {imageThumbnail?\"Image selected\":\"Choose a thumnail image\"}\n                        </label>  \n                        {imageThumbnail&&(<img width=\"100px\" height=\"100px\" src={URL.createObjectURL(imageThumbnail)}/>)}\n                        {/*change the 'dateTime' from the <DateTimeSelect/> component*/}\n                        <Suspense fallback={\n                            <div><Skeleton variant=\"text\" />\n                            <Skeleton variant=\"circle\" width={40} height={40} />\n                            <Skeleton variant=\"rect\" width={210} height={118} /></div>} >\n                                <DateTimeSelect changeDate={dateTime => setdateTime(dateTime)} dateTime={dateTime}/>\n                            </Suspense>                                            \n                        <TextField placeholder=\"Enter a decription...\" className = \"createEvent__textarea\" onChange={(e)=>setDescription(e.target.value)} value={description}\n                            id=\"outlined-multiline-static\"\n                            label=\"Multiline description\"\n                            multiline\n                            rows={4}\n                            defaultValue=\"Default Value\"\n                            variant=\"outlined\"\n                            />\n                        <Input style={{color:\"aliceblue\"}}  className=\"createEvent__venue\" type=\"text\" placeholder=\"Enter a Venue/Link...\" onChange={(e)=>setVenue(e.target.value)} value={venue}/>\n                        <Button className=\"createEvent___iButton\" disabled = {!imageThumbnail} variant ='contained' color=\"primary\" type ='submit' onClick={handleUpload}>Create the event</Button>\n                </form>\n           </div>\n        </div>\n    </div>\n    )\n}\n\nexport default CreateEvent;\n\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/confessions/ConfessionSharingContainer.js",["317","318","319"],"import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom';\nimport { useStateValue } from '../../contexts/StateProvider';\nimport Confessions from './Confessions';\nimport { DataBase } from '../firebase';\nimport '../posts/PostSharingContainer.css'\n\nfunction ConfessionSharingContainer() {\n    //get the slug from the url  (remeber that component using useParams should be inside <Router>)\n    const {confessionId} = useParams();\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    const [confessionToShare, setConfessionToShare] = useState([])\n    //====================================Confession changes listner=========================================\n    useEffect( () => {\n        //onSnapshot = listner to changes in confession \n        //everytime the confession change run this code\n        //grab the collection 'Events' from the database with doc = confessionId\n        DataBase.collection('confessions').doc(confessionId).get().then((doc) => {\n            setConfessionToShare(doc.data())\n            console.log(confessionToShare)\n        }).catch((err)=>(alert(err)))\n    },[,user,confessionId]);\n    return (\n        <div className=\"postSharingContainer\">\n            <Confessions confessionId={confessionId} confession={confessionToShare.confession} likesCount={confessionToShare.likesCount}/>\n        </div>\n    )\n}\n\nexport default ConfessionSharingContainer\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/confessions/CreateConfessions.js",["320"],"import React,{useState} from 'react';\nimport {DataBase} from '../firebase';\nimport firebase from 'firebase';\nimport {Button,TextField} from '@material-ui/core';\nimport {useStateValue} from '../../contexts/StateProvider'\nimport './CreateConfessions.css'\nimport AlertDialog from '../AlertDialog';\n\nfunction CreateConfessions() {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //store confession\n    const [confession,setConfession] = useState('')\n    //open alert box when a new event is created\n    const [openAlert,setOpenAlert] = useState(false)\n\n    const handlePost = (e) => {\n        DataBase.collection('confessions').add({\n            confession:confession,\n            user_id:user.uid,\n            timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n        })\n        setConfession('')\n        setOpenAlert(true)\n\n    }\n    return (\n        <div className=\"createConfessions\">\n            <AlertDialog text={\"Your new confession is up!\"} openAlert={openAlert} changeAlert={al=>{setOpenAlert(al)}}/>\n                <form className=\"createConfessions__form\">\n                    <h2 id=\"createConfessions_h2\"> Write a Confession </h2>\n                    <TextField className = \"createConfessions__textarea\" onChange={(e)=>setConfession(e.target.value)} value={confession}\n                                    id=\"outlined-multiline-static\"\n                                    label=\"Write a confession...\"\n                                    multiline\n                                    rows={15}\n                                    defaultValue=\"Default Value\"\n                                    variant=\"outlined\"\n                                    />\n                    <Button className=\"createConfessions___iButton\" disabled = {!confession} variant ='contained' color=\"primary\" type ='submit' onClick={handlePost}>Post</Button>\n                </form>\n        </div>\n        \n    )\n}\n\nexport default CreateConfessions;\n\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/user/UserProfile.js",["321","322","323","324","325","326","327","328","329"],"/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/posts/PostSharingContainer.js",["330","331","332"],"import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom';\nimport { useStateValue } from '../../contexts/StateProvider';\nimport { DataBase } from '../firebase';\nimport Post from './Post'\nimport './PostSharingContainer.css'\n\nfunction PostSharingContainer() {\n    //get the slug from the url  (remeber that component using useParams should be inside <Router>)\n    const {postId} = useParams();\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    const [postToShare, setPostToShare] = useState([])\n    //====================================Post changes listner=========================================\n    useEffect( () => {\n        //onSnapshot = listner to changes in posts \n        //everytime the posts change run this code\n        //grab the collection 'Events' from the database with doc = postId \n        DataBase.collection('posts').doc(postId).get().then((doc) => {\n            setPostToShare(doc.data())\n            console.log(postToShare)\n        }).catch((err)=>(alert(err)))\n    },[,user,postId]);\n    return (\n        <div className=\"postSharingContainer\">\n            <Post postId={postId} username={postToShare.username} user_id={postToShare.user_id} caption={postToShare.caption} imageUrl={postToShare.imageUrl} likesCount={postToShare.likesCount}  />\n        </div>\n    )\n}\n\nexport default PostSharingContainer\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/chat/WigetsDummy.js",["333"],"\n//users in sidebar chat (online/offline)\n\nimport React from 'react'\nimport './WidgetsDummy.css'\nimport { makeStyles } from '@material-ui/core/styles';\n//==================================================Card Styles==============================================\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    minWidth: 250,\n    height:60,\n    background: '#1A1A1A',\n    '&:hover': {\n       background: '#363A3E',\n    },\n    border:'1px grey',\n    marginBottom:'5px',\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    Bottom:'20px',\n    fontWeight:300,\n    color: 'white',\n    marginBottom:10,\n  },\n  avatar:{\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    marginTop:10,\n    marginLeft:10,\n    marginBottom:10,\n  },\n  typoStatus:{\n    color:'grey',\n  }\n\n}));\n//==================================================================================================================\nfunction WidgetsDummy() {\n\n    return (\n\n        <div className=\"widgetsChat\">\n            \n        </div>\n    )\n}\n\nexport default WidgetsDummy\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/Search.js",["334"],"import React from \"react\";\nimport { Avatar, TextField } from \"@material-ui/core\";\nimport algoliasearch from \"algoliasearch/lite\";\nimport {\n  InstantSearch,\n  SearchBox,\n  Hits,\n  connectStateResults,\n} from \"react-instantsearch-dom\";\nimport { Link } from \"react-router-dom\";\nimport \"./Widgets.css\";\n\nconst algoliaClient = algoliasearch(\n  \"QAL7BSNSX5\",\n  process.env.REACT_APP_ALGOLIA_SEARCH_ONLY_API_KEY\n);\n//avoid making an empty query\nconst searchClient = {\n  ...algoliaClient,\n  search(requests) {\n    if (requests.every(({ params }) => !params.query)) {\n      return Promise.resolve({\n        results: requests.map(() => ({\n          hits: [],\n          nbHits: 0,\n          nbPages: 0,\n          page: 0,\n          processingTimeMS: 0,\n        })),\n      });\n    }\n\n    return algoliaClient.search(requests);\n  },\n};\n\nfunction Search() {\n  return (\n    <div className=\"widgets__inputBox\">\n      <InstantSearch searchClient={searchClient} indexName=\"pals\">\n        <SearchBox className=\"widgets__search__searchBox\" />\n        <div className=\"widgets__search__results\">\n          <Results />\n        </div>\n      </InstantSearch>\n    </div>\n  );\n}\n\nexport default Search;\n\n//Dont show reslts when no query is entered\nconst Results = connectStateResults(({ searchState }) =>\n  searchState && searchState.query ? <Hits hitComponent={Hit} /> : <></>\n);\n// const Results = connectStateResults(\n//   ({ searchState, searchResults, children }) =>\n//     searchResults && searchResults.nbHits !== 0 ? (\n//       children\n//     ) : (\n//       <div>No results have been found for {searchState.query}.</div>\n//     )\n// );\n\nconst Hit = ({ hit }) => (\n  //using window.location.href cause outside of Router\n  <Link\n    to={`/pals/${hit.objectID}`}\n    onClick={() => (window.location.href = `/pals/${hit.objectID}`)}\n    style={{ textDecoration: \"none\" }}\n  >\n    <div className=\"widgets__search__hit\">\n      <Avatar\n        className=\"widgets__search__hit__avatar\"\n        alt={hit.displayName}\n        src={hit.displayName}\n      ></Avatar>\n      <div className=\"widgets__search__hit__content\">\n        <p className=\"widgets__search__hit__displayName\">{hit.displayName}</p>\n        <p className=\"widgets__search__hit__bio\">{hit.bio}</p>\n      </div>\n      {/* {console.log(\"HITS HITS HITS \"+hit)} */}\n    </div>\n  </Link>\n);\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/SwipeTab.js",[],"/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/navigation/SidebarOptions.js",[],"/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/AlertDialog.js",[],"/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/user/UserSwipeTab.js",[],"/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/confessions/Confessions.js",["335","336","337","338","339"],"import { Avatar, Button } from \"@material-ui/core\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useStateValue } from \"../../contexts/StateProvider\";\nimport \"./Confessions.css\";\nimport ChatBubbleOutlineRoundedIcon from \"@material-ui/icons/ChatBubbleOutlineRounded\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport { Collapse, IconButton, Input } from \"@material-ui/core\";\nimport { DataBase } from \"../firebase\";\nimport firebase from \"firebase\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport ShareIcon from \"@material-ui/icons/Share\";\nimport { Link } from \"react-router-dom\";\nimport { Suspense } from \"react\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport { Comment } from \"../Comment\";\nimport { format } from 'timeago.js'\n\n\nconst ConfessionsMenu = React.lazy(() => import(\"./ConfessionsMenu\"));\n\nfunction Confessions({ confession, confessionId, likesCount, timeInMillis }) {\n  //get the user from the provider\n  const [{ user }, dispatch] = useStateValue();\n  //comments from DataBase\n  const [confessionComments, setConfessionComments] = useState([]);\n  //set comment from input\n  const [confessionComment, setConfessionComment] = useState(\"\");\n  //for commentsIcon onclick collapse\n  const [expanded, setExpanded] = useState(false);\n  //if like=true or not\n  const [like, setLike] = useState(false);\n  //number of likes\n  const [likeCount, setLikeCount] = useState(likesCount);\n  //like ref\n  const likeCountRef = useRef(0);\n\n  //commentsIcon onclick collapse\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n  //convert to date\n  const convertToDate = (timestamp) => {\n    console.log(timestamp);\n    let currentDate = firebase.firestore.Timestamp.now();\n    console.log(currentDate);\n    let diff = Math.abs(timestamp - currentDate);\n    const dateInMillis = diff * 1000;\n    let date = new Date(dateInMillis).toLocaleTimeString();\n    return date.replace(/:\\d+ /, \" \") + \"hrs ago\";\n  };\n  //======================================Post comments to the database========================================================================================\n  const postConfessionComment = (e) => {\n    e.preventDefault();\n    //add comment to the 'comments' collection of the particular confession\n    DataBase.collection(\"confessions\")\n      .doc(confessionId)\n      .collection(\"comments\")\n      .add({\n        text: confessionComment,\n        username: user.displayName,\n        user_id: user.uid,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      });\n    //clear the input after posting\n    setConfessionComment(\"\");\n  };\n  //======================================Post likes to the database===================================================================================\n  const postLike = () => {\n    const newLikeValue = !like;\n    const newLikeCount = like ? likeCount - 1 : likeCount + 1;\n    setLike(!like);\n\n    setLikeCount(newLikeCount);\n    setLike(newLikeValue);\n    DataBase.collection(\"confessions\")\n      .doc(confessionId)\n      .collection(\"confessionLikes\")\n      .doc(user.uid)\n      .set({\n        like: newLikeValue,\n        username: user.displayName,\n        user_id: user.uid,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n      .catch((err) => {\n        console.log(\"something wrong happened \" + err.message);\n      });\n  };\n  //====================================Get the comments from the database and display=================================================================\n  useEffect(() => {\n    //if a confessionId is passed\n    if (confessionId) {\n      //get a snapshot listner for 'comments' collection inside the passed 'confessionId' doc inside the collection 'confessions'\n      DataBase.collection(\"confessions\")\n        .doc(confessionId)\n        .collection(\"comments\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot((snapshot) => {\n          //set comments to the data inside the doc\n          setConfessionComments(snapshot.docs.map((doc) => doc.data()));\n          console.log(confessionComments + \" commnets\");\n        });\n\n      //check if the user already liked the doc or not\n      setTimeout(() => {\n        DataBase.collection(\"confessions\")\n          .doc(confessionId)\n          .collection(\"confessionLikes\")\n          .doc(user.uid)\n          .get()\n          .then((doc) => {\n            if (doc.exists) {\n              console.log(doc.data().like);\n              setLike(doc.data().like);\n              console.log(like + \" 1\");\n              console.log(\"likedData\");\n            } else {\n              // doc.data() will be undefined in this case\n              console.log(\"Not liked\");\n            }\n          })\n          .catch((error) => {\n            console.log(\"Error getting document:\", error);\n          });\n      }, 500);\n\n      //    grab the docs which have like=true\n      setTimeout(() => {\n        DataBase.collection(\"confessions\")\n          .doc(confessionId)\n          .collection(\"confessionLikes\")\n          .where(\"like\", \"==\", true)\n          .get()\n          .then((querySnapshot) => {\n            setLikeCount(querySnapshot.docs.map((doc) => doc.data()).length);\n            console.log(likeCount + \" likes count\");\n            likeCountRef.current = likeCount;\n          })\n          .catch((error) => {\n            console.log(\"Error getting documents: \", error);\n          });\n      }, 400);\n    }\n  }, [, user, confessionId]);\n  //=====================================================================================================\n\n  return (\n    <div className=\"confessions\">\n      <div className=\"confessions__header\">\n        <div className=\"confessions__header__userName\">\n          <Avatar alt={\"username\"} src=\"/static/images/avatar/1.jpg\" />{\" \"}\n          <span>Annonymous </span>\n          <p>{format(timeInMillis)}</p>\n        </div>\n        <Suspense\n          fallback={\n            <div>\n              <Skeleton variant=\"text\" />\n            </div>\n          }\n        >\n          <ConfessionsMenu confessionId={confessionId} />\n        </Suspense>\n      </div>\n      <div className=\"confessions__confession\">\n        <p style={{ color: \"aliceblue\" }}>{confession}</p>\n      </div>\n      <div className=\"confessions__footer\">\n        <div className=\"confessions__likes\">\n          {/*like icon*/}\n\n          {like ? (\n            <Button onClick={postLike}>\n              <FavoriteIcon\n                fontsize=\"small\"\n                cursor=\"pointer\"\n                style={{ color: \"red\" }}\n              />\n            </Button>\n          ) : (\n            <Button onClick={postLike}>\n              <FavoriteIcon fontsize=\"small\" cursor=\"pointer\" />{\" \"}\n            </Button>\n          )}\n          <p className=\"confessions__likesCount\" component={\"span\"}>\n            Likes {likeCount}\n          </p>\n        </div>\n\n        {/*display the comments from the database */}\n        <div className=\"confessions__commentsIcon\">\n          <IconButton\n            onClick={handleExpandClick}\n            id=\"comments-icon\"\n            disabled={confessionComments.length === 0}\n          >\n            <ChatBubbleOutlineRoundedIcon\n              fontsize=\"small\"\n              cursor=\"pointer\"\n              aria-expanded={expanded}\n              aria-label=\"show more comments\"\n            />\n          </IconButton>\n          {/*no. of comments*/}\n          {confessionComments.length > 0 && (\n            <small\n              onClick={handleExpandClick}\n              className=\"confessions__commentsIconCommentsCount\"\n            >\n              {confessionComments.length}\n            </small>\n          )}\n        </div>\n\n        {/*share icon*/}\n        <Button\n          onClick={() => {\n            if (navigator.share) {\n              navigator\n                .share({\n                  title: document.title,\n                  text: confession,\n                  url:\n                    window.location.href + `share/confessions/${confessionId}`,\n                })\n                .then(() => console.log(\"Successful share\"))\n                .catch((error) => console.log(\"Error sharing\", error));\n            } else {\n              alert(\"Web Share API is not supported in your browser.\");\n            }\n          }}\n        >\n          <ShareIcon fontsize=\"small\" cursor=\"pointer\"></ShareIcon>\n        </Button>\n      </div>\n\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <div className=\"confessions_commentWrapper\">\n          {confessionComments.map((comment) => (\n            //here we are accessing the username and text fields of the doc[comment(iterator)] from 'comments' collection of the DataBase\n            <Comment\n              user_id={comment.user_id}\n              username={comment.username}\n              text={comment.text}\n              timeInMillis={comment?.timestamp?.seconds * 1000}\n            />\n          ))}\n        </div>\n      </Collapse>\n      {/*<p className=\"confessions__comments\" key={comment.id}>\n              <Link\n                to={`/pals/${comment.user_id}`}\n                style={{ textDecoration: \"none\" }}\n              >\n                <strong>{comment.username + \":\"}</strong>\n              </Link>\n              {comment.text}\n          </p>*/}\n      {/*post the comment to the database*/}\n      {\n        //if the user is logged in then only show the post comment section\n        user && (\n          <form className=\"confessions__commentBox\">\n            <Input\n              style={{ color: \"aliceblue\" }}\n              className=\"confessions__input\"\n              type=\"text\"\n              placeholder=\"Add a comment...\"\n              value={confessionComment}\n              onChange={(e) => setConfessionComment(e.target.value)}\n            />\n            <IconButton\n              disabled={!confessionComment}\n              variant=\"contained\"\n              color=\"primary\"\n              type=\"submit\"\n              onClick={postConfessionComment}\n            >\n              <SendIcon />\n            </IconButton>\n          </form>\n        )\n      }\n    </div>\n  );\n}\n\nexport default Confessions;\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/DateTimeSelect.js",["340","341"],"import React, { useState } from \"react\";\nimport {\n  makeStyles,\n  withStyles,\n  ThemeProvider,\n  createMuiTheme\n} from \"@material-ui/core/styles\";\nimport { KeyboardDateTimePicker } from \"@material-ui/pickers\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport DateFnsUtils from '@date-io/date-fns';\nimport TextField from \"@material-ui/core/TextField\";\n\n\nconst CURRENT_THEME = {\n  background: \"#111D23\",\n  el1: \"#1B262C\",\n  el2: \"#263137\",\n  el3: \"#3C464B\",\n  text: \"#210124\",\n  textInv: \"#F0EDEE\",\n  main: \"#3857c5\",//change color here \n  secondary: \"#4DBBEB\",\n  mainShadow: \"#556AB5\",\n  danger: \"#DB162F\",\n  warning: \"\",\n  font1: `\"Roboto Slab\", \"Times New Roman\", serif`,\n  font2: `\"Roboto light\"`\n};\n\nconst styles = {\n  paper: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    backgroundColor: CURRENT_THEME.el3,\n    borderColor: CURRENT_THEME.danger\n  },\n  inputIcons: {\n    padding: 2,\n    color: CURRENT_THEME.textInv\n  },\n  input: {\n    flex: 1,\n    marginLeft: 8,\n    color: CURRENT_THEME.textInv\n  }\n};\n\nconst useStyles = makeStyles(styles);\nconst StyledDateTime = withStyles({\n  \"& .MuiPickersToolbar-toolbar\": {\n    backgroundColor: CURRENT_THEME.textInv\n  },\n  root: {\n    MuiPickersToolbar: {\n      toolbar: {\n        backgroundColor: CURRENT_THEME.textInv,\n        \"& .MuiPickersToolbar-toolbar\": {\n          backgroundColor: CURRENT_THEME.textInv\n        }\n      }\n    }\n  }\n})(KeyboardDateTimePicker);\n\nconst CssTextField = withStyles({\n  root: {\n    //all\n    \"& .MuiIconButton-root\": {\n      color: CURRENT_THEME.textInv\n    },\n    // filled\n    \"& .MuiFilledInput-underline\": {\n      \"&:before\": {\n        borderBottomColor: \"transparent\"\n      },\n      \"&:after\": {\n        borderBottomColor: \"transparent\"\n      }\n    },\n    \"& .MuiFilledInput-input\": {\n      color: CURRENT_THEME.textInv\n      // borderRadius: \"50px 50px 0 0\"\n    },\n    \"& .MuiFilledInput-root\": {\n      borderRadius: \"10px 10px 10px 10px\",\n      backgroundColor: CURRENT_THEME.el3,\n      // boxShadow: \"0px 0px 15px 0px rgb(26,181,225, 0.5)\"\n      \"&.Mui-focused\": {\n        borderColor: \"#556AB5\",\n        backgroundColor: CURRENT_THEME.el2,\n        // boxShadow: \"0px 0px 15px 0px rgb(26,181,225, 0.5)\"\n        boxShadow: `0px 0px 10px 0px ${CURRENT_THEME.main}, 0px 0px 40px 0px ${CURRENT_THEME.main}, 0px 0px 80px 0px ${CURRENT_THEME.main}`\n        // boxShadow: '0px 0px 15px 0px #556AB5, 0px 0px 15px 0px #556AB5'\n      }\n    },\n\n    \"& .MuiInputLabel-formControl\": {\n      color: CURRENT_THEME.textInv\n    }\n    // \"& .MuiOutlinedInput-input\": {\n    //   color: CURRENT_THEME.textInv     \n    // },\n    // \"& .MuiOutlinedInput-root\": {\n    //   \"& fieldset\": {\n    //     borderColor: \"#1ab5e1\",\n    //     // color: \"#1ab5e1\"\n    //   },\n    //   \"& label\": {\n    //     color: CURRENT_THEME.textInv\n    //   },\n    //   \"&:hover fieldset\": {\n    //     borderColor: \"#1ab5e1\"\n    //   },\n    //   \"&.Mui-focused fieldset\": {\n    //     borderColor: \"#1ab5e1\",\n    //     boxShadow: \"0px 0px 15px 0px rgb(26,181,225, 0.5)\"\n    //   }\n    // }\n  }\n})(TextField);\n\nconst materialTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: CURRENT_THEME.main\n    }\n  },\n  overrides: {\n    MuiPickersToolbar: {\n      toolbar: {\n        backgroundColor: CURRENT_THEME.el3\n      }\n    },\n    MuiPickersCalendarHeader: {\n      iconButton: {\n        backgroundColor: \"transparent\",\n        color: CURRENT_THEME.main\n      },\n      dayLabel: {\n        color: CURRENT_THEME.textInv //days in calendar\n      },\n      transitionContainer: {\n        color: CURRENT_THEME.textInv\n      }\n    },\n    MuiPickersBasePicker: {\n      pickerView: {\n        backgroundColor: CURRENT_THEME.background\n      }\n      //   backgroundColor: CURRENT_THEME.el3,\n    },\n    MuiPickersDay: {\n      day: {\n        color: CURRENT_THEME.textInv //days in calendar\n      }\n      //   daySelected: {\n      //     backgroundColor: CURRENT_THEME.main, //calendar circle\n      //   },\n      //   dayDisabled: {\n      //     color: CURRENT_THEME.main, // current day\n      //   },\n      //   current: {\n      //     color: CURRENT_THEME.main,\n      //   },\n    },\n    // MuiButton:{\n    //   textPrimary:{\n    //     color: CURRENT_THEME.main,\n    //   }\n    // },\n\n    MuiDialogActions: {\n      root: {\n        backgroundColor: CURRENT_THEME.background\n      }\n    },\n    MuiPickersClock: {\n      clock: {\n        backgroundColor: CURRENT_THEME.el2\n      }\n      //   pin:{\n      //     backgroundColor: CURRENT_THEME.main,\n      //   },\n      // },\n      // MuiPickersClockPointer:{\n      //   pointer:{\n      //     backgroundColor: CURRENT_THEME.main,\n      //   },\n    },\n    MuiPickersClockNumber: {\n      clockNumber: {\n        color: CURRENT_THEME.textInv\n      }\n      //   numberSelected: {\n      //     backgroundColor: CURRENT_THEME.main, //calendar circle\n      //   },\n    }\n    // MuiMuiPickersTime:{\n    //   timeSelected: {\n    //     backgroundColor: CURRENT_THEME.main, //calendar circle\n    //   },\n    // },\n    // MuiPickersModal: {\n    //   dialogAction: {\n    //     color: CURRENT_THEME.main, //no se\n    //     backgroundColor: CURRENT_THEME.el3,\n    //   },\n    // },\n  }\n});\n\nfunction DateTimeSelect(props) {\n  //select the date here with myDate\n  //once date is selected, pass it on to parent component\n  const [myDate, setmyDate] = useState();\n\n  return (\n    <ThemeProvider theme={materialTheme}>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <div className=\"dateTimeSelect\">\n          <KeyboardDateTimePicker\n            format={'dd-MMM-yyyy:KK:mm a'}\n            label=\"Choose date and time for event\"\n            inputVariant=\"filled\"\n            helperText=\"\"\n            TextFieldComponent={CssTextField}\n            size=\"small\"\n            value={myDate}\n            onChange={setmyDate}\n            //change the 'dateTime' state of the parent from the child\n            onClick={props.changeDate(myDate)}\n          />\n          </div>\n      </MuiPickersUtilsProvider>\n    </ThemeProvider>\n  );\n}\nexport default DateTimeSelect","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/posts/Post.js",["342","343","344","345","346","347","348","349","350","351","352","353","354","355"],"//post component\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./Post.css\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport {\n  Button,\n  Collapse,\n  IconButton,\n  Input,\n  makeStyles,\n  Modal,\n  Snackbar,\n} from \"@material-ui/core\";\nimport { DataBase, realtime } from \"../firebase\";\nimport firebase from \"firebase\";\nimport ChatBubbleOutlineRoundedIcon from \"@material-ui/icons/ChatBubbleOutlineRounded\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport { useStateValue } from \"../../contexts/StateProvider\";\nimport ShareIcon from \"@material-ui/icons/Share\";\nimport PostMenu from \"./PostMenu\";\nimport { Link } from \"react-router-dom\";\nimport { Comment } from \"../Comment\";\nimport { format } from 'timeago.js'\n\n//============================================Comments pop-over styles====================================\nconst useStyles = makeStyles((theme) => ({\n  popover: {\n    pointerEvents: \"none\",\n  },\n  paper: {\n    padding: theme.spacing(1),\n    backgroundColor: \"#363A3E\",\n    color: \"aliceblue\",\n  },\n  snackbar: {\n    bottom: 20,\n    zIndex: 10000,\n  },\n}));\n//=============================================Modal styles============================================\nfunction getModalStyle() {\n  const top = -50;\n  const left = -50;\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\n//=======================================================================================================\nfunction Post({ postId, username, user_id, timeInMillis, caption, imageUrl, likesCount }) {\n  const classes = useStyles();\n  //get the user from the provider\n  const [{ user }, dispatch] = useStateValue();\n  //store comments from the database for a praticular post in an array (GET from DataBase)\n  const [comments, setComments] = useState([]);\n  //input comment for a post from the user  (POST to DataBase)\n  const [comment, setComment] = useState(\"\");\n  //to store users in chat list after getting them from the database\n  const [chats, setChats] = useState([]);\n  //the problem with let here is  it is making everything empty after\n  //to store uid and bool for if the user is present in the chat list\n  const [chats_array, setChats_array] = useState([]);\n  const [isPresent, setIsPresent] = useState(false);\n  //for commentsIcon onclick collapse\n  const [expanded, setExpanded] = useState(false);\n  //for commentsIcon onhover popup\n  const [anchorEl, setAnchorEl] = useState(null);\n  //number of likes\n  const [likeCount, setLikeCount] = useState(likesCount);\n  //avatar hover modal\n  const [hoverOpen, setHoverOpen] = useState(false);\n  //modal styles\n  const [modalStyle] = useState(getModalStyle);\n  //if like=true or not\n  const [like, setLike] = useState(false);\n  const [uid, setUid] = useState(user.uid);\n  //added to chat notification open/close\n  const [show, setShow] = useState(false);\n  //like ref\n  const likeCountRef = useRef(0);\n\n  //commentsIcon onclick collapse\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n  //commentsIcon onhover popup\n  const open = Boolean(anchorEl);\n  //open the popover that we open on hover on commentsIcon\n  const handlePopoverOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  //close the popover that we open on hover on commentsIcon\n  const handlePopoverClose = () => {\n    setAnchorEl(null);\n  };\n\n  //open the Avatar modal\n  const handleHoverModalOpen = () => {\n    setHoverOpen(true);\n  };\n  //close the Avatar modal\n  const handleHoverModalClose = () => {\n    setHoverOpen(false);\n  };\n  //convert to date\n  const convertToDate = (timestamp) => {\n    // console.log(timestamp)\n    let currentDate = firebase.firestore.Timestamp.now();\n    // console.log(currentDate)\n    let diff = Math.abs(timestamp - currentDate);\n    const dateInMillis = diff;\n    let date = new Date(dateInMillis).toLocaleTimeString();\n    return date.replace(/:\\d+ /, \" \") + \"hrs ago\";\n  };\n  //close notifications toast\n  const handleCloseNotif = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setShow(false);\n  };\n  //======================================Post likes to the database===================================================================================\n  const postLike = () => {\n    const newLikeValue = !like;\n    const newLikeCount = like ? likeCount - 1 : likeCount + 1;\n    setLike(!like);\n\n    setLikeCount(newLikeCount);\n    setLike(newLikeValue);\n    DataBase.collection(\"posts\")\n      .doc(postId)\n      .collection(\"postLikes\")\n      .doc(user.uid)\n      .set({\n        like: newLikeValue,\n        username: user.displayName,\n        user_id: user.uid,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n      .catch((err) => {\n        console.log(\"something wrong happened \" + err.message);\n      });\n  };\n  //====================================Get the comments and likes from the database and display=================================================================\n  useEffect(() => {\n    //if a postId is passed\n    if (postId) {\n      //get a snapshot listner for 'comments' collection inside the passed 'postId' doc inside the collection 'posts'\n      DataBase.collection(\"posts\")\n        .doc(postId)\n        .collection(\"comments\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot((snapshot) => {\n          //set comments to the data inside the doc\n          setComments(snapshot.docs.map(doc =>({id:doc.id,comment:doc.data()})));\n        });\n\n      //check if the user already liked the doc or not\n      setTimeout(() => {\n        DataBase.collection(\"posts\")\n          .doc(postId)\n          .collection(\"postLikes\")\n          .doc(user.uid)\n          .get()\n          .then((doc) => {\n            if (doc.exists) {\n              console.log(doc.data().like);\n              setLike(doc.data().like);\n              console.log(like + \" 1\");\n              console.log(\"likedData\");\n            } else {\n              // doc.data() will be undefined in this case\n              console.log(\"Not liked\");\n            }\n          })\n          .catch((error) => {\n            console.log(\"Error getting document:\", error);\n          });\n      }, 500);\n\n      //    grab the docs which have like=true\n      setTimeout(() => {\n        DataBase.collection(\"posts\")\n          .doc(postId)\n          .collection(\"postLikes\")\n          .where(\"like\", \"==\", true)\n          .get()\n          .then((querySnapshot) => {\n            setLikeCount(querySnapshot.docs.map((doc) => doc.data()).length);\n            console.log(likeCount + \" likes count\");\n            likeCountRef.current = likeCount;\n          })\n          .catch((error) => {\n            console.log(\"Error getting documents: \", error);\n          });\n      }, 400);\n    }\n    //when postId,user changes or page loads fire the code above\n  }, [, postId]);\n  //========================================================================================================================\n\n  useEffect(() => {\n    //Run this function when the post component loads or there are changes in user object or chats object\n    //because we want to run this function only after the data from the database has been fetched and the component in which we are mapping this data (Button) that,\n    //loads after the component which calls for this function (<Avatar>) is loaded\n    // console.log(\"running AddButton\")\n    //loop through the object list of 'chats'\n    // if the 'chat_user_id' is already present in the chats object, then set the the second dimension true\n    //convert each object into an array and loop through it\n    let cha = [];\n    //to store the return from the function if the user is present in the chat list\n    for (const chat of Object.entries(chats)) {\n      if (user_id === chat.chat_user_id) {\n        // console.log([chat[1].chat_user_id,true])\n        // console.log([chat[1].chat_user_id,true][0])\n        // first dimension is for uid\n        // second dimension is a bool for checking whether the 'chat_user_id' is already present in the chats\n\n        cha.push([chat[1].chat_user_id, true]);\n        // console.log(\"chats_array \"+chats_array)\n      } else {\n        cha.push([chat[1].chat_user_id, false]);\n        // console.log(\"chats_array \"+chats_array)\n      }\n    }\n    setChats_array(cha);\n    setIsPresent(isPresentInChats(user_id, chats_array));\n    // console.log(isPresent)\n  }, [, postId, chats, user]);\n  //==================================================check whether user is present in the chat list=========================================================================\n  const isPresentInChats = (user_id, chats_array) => {\n    for (const chat of chats_array) {\n      if (chat[0] === user_id) {\n        return true;\n      }\n    }\n  };\n  //======================================Get the list of users in chatlist===============================================================================\n  useEffect(() => {\n    if (user) {\n      const unsubscribe = DataBase.collection(\"users\")\n        .doc(user.uid)\n        .collection(\"chats\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot((snapshot) => {\n          setChats(snapshot.docs.map((doc) => doc.data()));\n        });\n      return unsubscribe();\n    }\n\n    //when postId changes fire the code above\n  }, [, user_id, user]);\n\n  //======================================Add the selected user to chats list============================================\n  const addToChats = () => {\n    //if the document by the user_id already exists then it wont change it\n    //if logged in user 'user.uid' == 'user_id' user who wrote the post  then dont add it to chats list\n    if (!(user.uid === user_id)) {\n      //==============Add user_id to Firestore as well as to Realtime database=======================\n\n      // //===================Add to Firestore============\n      // DataBase.collection('users').doc(user.uid).collection('chats').doc(user_id).set({\n      //     chat_username:username,\n      //     //user id of the user who wrote the post\n      //     chat_user_id:user_id,\n      //     timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n\n      //     })\n      // //add the user1 who added user2 to chatlist of user1 to chatlist of user2\n      // //also later write the code to send notification to user2 that he has been added to the chatlist by user1\n      // DataBase.collection('users').doc(user_id).collection('chats').doc(user.uid).set({\n      //     chat_username:user.displayName,\n      //     //user id of the user who wrote the post\n      //     chat_user_id:user.uid,\n      //     timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n\n      //     })\n\n      //===================Add to Realtime============\n      realtime.ref(`/'chats'/${user.uid}/${user_id}`).set(\n        {\n          chat_username: username,\n          //user id of the user who wrote the post\n          chat_user_id: user_id,\n          timestamp: firebase.database.ServerValue.TIMESTAMP,\n          lastchatAt: firebase.database.ServerValue.TIMESTAMP,\n        },\n        (error) => {\n          if (error) {\n            alert(error.message);\n          } else {\n          }\n        }\n      );\n      //add the user1 who added user2 to chatlist of user1 to chatlist of user2\n      //also later write the code to send notification to user2 that he has been added to the chatlist by user1\n      realtime.ref(`/'chats'/${user_id}/${user.uid}`).set(\n        {\n          chat_username: user.displayName,\n          //user id of the user who wrote the post\n          chat_user_id: user.uid,\n          timestamp: firebase.database.ServerValue.TIMESTAMP,\n          lastchatAt: firebase.database.ServerValue.TIMESTAMP,\n        },\n        (error) => {\n          if (error) {\n            alert(error.message);\n          } else {\n          }\n        }\n      );\n    }\n    //open notification alert\n    setShow(true);\n  };\n  //======================================Post comments to the database========================================================================================\n  const postComment = (e) => {\n    e.preventDefault();\n    //add comment to the 'comments' collection of the particular post\n    DataBase.collection(\"posts\").doc(postId).collection(\"comments\").add({\n      text: comment,\n      username: user.displayName,\n      user_id: user.uid,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n    //clear the input after posting\n    setComment(\"\");\n  };\n\n  //================================================================================================================================================================\n  return (\n    <div className=\"post\">\n      <Snackbar\n        className={classes.snackbar}\n        open={show}\n        autoHideDuration={1000}\n        anchorOrigin={{ vertical: \"center\", horizontal: \"center\" }}\n        onClose={handleCloseNotif}\n        message=\"Added to chats\"\n      />\n\n      <div className=\"post__header\">\n        {/*avatar managed by@material-ui/core*/}\n        <div className=\"post__userProfile\">\n          <Avatar\n            className=\"post__avatar\"\n            alt={username}\n            src=\"/static/images/avatar/1.jpg\"\n            onClick={handleHoverModalOpen}\n          />\n          <Link to={`/pals/${user_id}`} style={{ textDecoration: \"none\" }}>\n            <h3>{username}</h3>\n          </Link>\n          <p>{format(timeInMillis)}</p>\n        </div>\n        <Modal\n          open={hoverOpen}\n          onClose={() => setHoverOpen(false)}\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n        >\n          <center>\n            <img\n              style={{ width: \"fit-content\" }}\n              alt={username}\n              src={imageUrl}\n            />\n          </center>\n        </Modal>\n        {/*==================================================================================================================================== */}\n\n        {/* {user.uid === user_id && <Button onClick={addToChats}>Add to chats</Button>} */}\n\n        {/*initially when chats array does not exists as it is made after calling the addToChats function  */}\n        {/*if the array is empty (initial condition) */}\n        {/* {console.log(\"array length\")}\n                {console.log((Array.isArray(chats_array) && chats_array.length) === 0 )} */}\n        {/* {console.log(chats_array)} */}\n        {/*to check whether the user is present in the chats_array*/}\n\n        {\n          //to stop react from freaking out when the user is not logged in\n          user &&\n            //Dont show anything for the post which are written by the user who is logged in\n            !(user.uid === user_id) &&\n            //when there are no chats (chat array is empty)\n            ((Array.isArray(chats_array) && chats_array.length) === 0 ? (\n              <Button size=\"small\" onClick={addToChats}>\n                Add to chats\n              </Button>\n            ) : //when there are chats\n            //check if the user is present in the chats_array\n            isPresent ? (\n              //if present\n              chats_array.map((chat) => (\n                //chat[0] contains the 'uid' of the 'user' who wrote the post\n                //find the array element corresponding to the given post\n                //this is done by mathcing the 'user_id' from 'posts' to chat_user_id (chat[0])\n                //then check bool chat[1] for whether the element is present in an array or not\n                //if the element is not present then show <Add to chats> else show <Chat>\n                <span id={chat[0]}>\n                  {chat[0] == user_id &&\n                    (chat[1] ? (\n                      <Button size=\"small\" onClick={addToChats}>\n                        Add to chats\n                      </Button>\n                    ) : (\n                      <Button size=\"small\">Chat</Button>\n                    ))}\n                </span>\n              ))\n            ) : (\n              //if not present\n              <Button size=\"small\" key={user_id} onClick={addToChats}>\n                Add chats\n              </Button>\n            ))\n        }\n        {/* {                chats_array.map((chat)=>{\n                                    console.log(chat+\"chta\")\n                })\n                } */}\n\n        {/*Report or bookmarks Menu*/}\n        <PostMenu\n          postId={postId}\n          postUsername={username}\n          postUserId={user_id}\n        />\n\n        {/*===========================================================================================================================================*/}\n      </div>\n      {/* if post doesnt have image then dont show the image*/}\n      {imageUrl === \"no-image\" ? (\n        <></>\n      ) : (\n        <img\n          className=\"post__image\"\n          src={imageUrl}\n          alt={\n            username ? username + \" \" : \"--\" + \" \" + caption ? caption : \"--\"\n          }\n        />\n      )}\n      {/*show username in caption only for image posts*/}\n      <h4\n        className={imageUrl === \"no-image\" ? \"post__text\" : \"post__textImage\"}\n      >\n        {imageUrl === \"no-image\" ? (\n          <></>\n        ) : (\n          <strong>{username ? username + \": \" : \"\"}</strong>\n        )}\n        <span>{\" \" + caption ? caption : \"--\"}</span>\n      </h4>\n      <div className=\"post__footer\">\n        <div className=\"post__likes\">\n          {/*like icon*/}\n\n          {like ? (\n            <Button onClick={postLike}>\n              <FavoriteIcon\n                fontsize=\"small\"\n                cursor=\"pointer\"\n                style={{ color: \"red\" }}\n              />\n            </Button>\n          ) : (\n            <Button onClick={postLike}>\n              <FavoriteIcon fontsize=\"small\" cursor=\"pointer\" />{\" \"}\n            </Button>\n          )}\n\n          {/* <FlipMove> \n                                        {likes.map((id,like)=>\n                                            (<p style={{color:'aliceblue'}} id={id}><strong>{user && (user.displayName===like.username?(like.like?(<strong>You{JSON.stringify(like.like)}</strong>):(<strong></strong>)):(like.username))}</strong></p>)\n                                        )}\n                                </FlipMove> */}\n          <p className=\"post__likesCount\" component={\"span\"}>\n            Likes {likeCount}\n          </p>\n        </div>\n\n        {/*collapse  comments*/}\n        {/*Comment icon*/}\n        <div className=\"post__commentsIcon\">\n          <Button\n            onClick={handleExpandClick}\n            id=\"comments-icon\"\n            onMouseEnter={handlePopoverOpen}\n            onMouseLeave={handlePopoverClose}\n            disabled={comments.length === 0}\n          >\n            <ChatBubbleOutlineRoundedIcon\n              fontsize=\"small\"\n              cursor=\"pointer\"\n              aria-expanded={expanded}\n              aria-label=\"show more comments\"\n            />\n          </Button>\n          {/*no. of comments*/}\n          {comments.length > 0 && (\n            <small\n              onClick={handleExpandClick}\n              className=\"post__commentsIconCommentsCount\"\n            >\n              {comments.length}\n            </small>\n          )}\n        </div>\n\n        {/*share icon*/}\n        <Button\n          onClick={() => {\n            if (navigator.share) {\n              navigator\n                .share({\n                  title: document.title,\n                  text: caption,\n                  url: window.location.href + `share/posts/${postId}`,\n                })\n                .then(() => console.log(\"Successful share\"))\n                .catch((error) => console.log(\"Error sharing\", error));\n            } else {\n              alert(\"Web Share API is not supported in your browser.\");\n            }\n          }}\n        >\n          <ShareIcon fontsize=\"small\" cursor=\"pointer\"></ShareIcon>\n        </Button>\n      </div>\n      {/*display the comments from the database */}\n      <div className=\"post__comments\">\n        {/*collapse when comments icon is clicked and show all the comments*/}\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n          <div className=\"post_commentWrapper\">\n            {comments.map((id,comment) => {\n              //here we are accessing the username and text fields of the doc[comment(iterator)] from 'comments' collection of the DataBase\n              return(<Comment\n                key={id.id}\n                commentId={id.id}\n                user_id={id.comment.user_id}\n                username={id.comment.username}\n                timeInMillis={id.comment?.timestamp?.seconds * 1000}\n                text={id.comment.text}\n                postId={postId}\n              />)})\n            }\n          </div>\n        </Collapse>\n        {/*if comments icon not clicked and comments are more than zero then show the latest comment*/}\n        <div className=\"post__commentsFirstComment\">\n          {!expanded && comments.length !== 0 && (\n            <Comment\n              user_id={comments[0].comment.user_id}\n              username={comments[0].comment.username}\n              text={comments[0].comment.text}\n              timeInMillis={comments[0].comment.timestamp?.seconds * 1000}\n            />\n          )}\n        </div>\n      </div>\n      {/*post the comment to the database*/}\n      {\n        //if the user is logged in then only show the post comment section\n        user && (\n          <form className=\"post__commentBox\">\n            <Input\n              style={{ color: \"aliceblue\" }}\n              className=\"post__input\"\n              type=\"text\"\n              placeholder=\"Add a comment...\"\n              value={comment}\n              onChange={(e) => setComment(e.target.value)}\n            />\n            <IconButton\n              disabled={!comment}\n              variant=\"contained\"\n              color=\"primary\"\n              type=\"submit\"\n              onClick={postComment}\n            >\n              <SendIcon />\n            </IconButton>\n          </form>\n        )\n      }\n    </div>\n  );\n}\n\nexport default Post;\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/events/Event.js",["356","357","358"],"import React, { Suspense, useEffect, useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport './Event.css'\nimport { DataBase } from '../firebase';\nimport { useStateValue } from '../../contexts/StateProvider';\nimport firebase from 'firebase/app'\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport ShareIcon from '@material-ui/icons/Share';\nimport SpeakerPhoneIcon from '@material-ui/icons/SpeakerPhone';\nimport { IconButton } from '@material-ui/core';\n\n\nconst EventsMenu = React.lazy(()=>import('./EventsMenu'))\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor:\"#2E3336\",\n  },\n  media: {\n    height: 140,\n  },\n});\nfunction Event({eventId, dateTime, venue, username,title, description, user_id, imageUrl, interestedCount}) {\n    const classes = useStyles();\n    const convertToDate = (date) => {\n        let k = date\n        let dat = Date(k)\n        dat = new Intl.DateTimeFormat('en-US', {year: 'numeric', month: \"long\" ,day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(k)\n        return dat\n    }\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //bool to check if the current event is already subscribed or not\n    const [interested,setInterested] = useState(false) \n    //disable the interested button after click\n    const [onclickDisable,setOnclickDisable] = useState(false)\n\n//===================================Add event to interested====================================\n    const addInterested = () => {\n    DataBase.collection('users').doc(user.uid).collection('interestedEvents').doc(eventId).set(\n        {   eventTitle:title,\n            eventId:eventId,\n            dateTime:dateTime,\n            venue:venue,\n            eventDescription:description,\n            eventOrganizedByName:username,\n            eventOrganizedById:user_id,\n        }\n    )\n    //increase the interested count\n    DataBase.collection('events').doc(eventId).update(\"interestedCount\", firebase.firestore.FieldValue.increment(1))\n\n    setOnclickDisable(true)\n}\n\n//=====================================check if the user already registered for the event ==========================\nuseEffect(() => {\n\n    DataBase.collection('users').doc(user.uid).collection('interestedEvents').doc(eventId).get().then((doc) => {\n        if (doc.exists) {\n            setInterested(true)\n        } else {\n            // doc.data() will be undefined in this case\n            console.log(\"No such document!\");\n        }\n    }).catch((error) => {\n        console.log(\"Error getting document:\", error);\n    });\n    \n}, [eventId,interested])\n\n//===============================================================================================\n    return (\n        <div className=\"event\">\n            <div className=\"event__header\">\n                <div className=\"event__headerInfo\">\n                    <Typography className=\"event__title\"  variant=\"h5\">\n                        {title}\n                    </Typography>\n                    <span className=\"event__dateTime\">\n                        Date and time:<b>{\" \"+ convertToDate(dateTime)}</b>\n                    </span>\n                    <span  className=\"event__location\">\n                        Venue:{venue}\n                    </span>\n                </div>\n                <Suspense fallback={\n                        <div><Skeleton variant=\"text\" /></div>} >\n                            <EventsMenu eventId={eventId} eventUsername={username} eventUserId={user_id}/>\n                </Suspense>\n            </div>\n            <Card className={classes.root}>\n\n                <div className=\"event__thubnail\">\n                    <CardActionArea>\n                        <CardMedia\n                        className={classes.media}\n                        image={imageUrl}\n                        />\n                    </CardActionArea>\n                </div>\n\n                <CardContent className=\"event__description\">\n                    <Typography variant=\"body2\" color=\"textSecondary\"  component={'span'}>\n                        {description}\n                    </Typography>\n                </CardContent>\n\n                <div className=\"event__footer\">\n                    <div className=\"event__interested\">\n                        {/*if already registered for the event then show registered*/}\n                    {\n                    !interested?(<Button size=\"small\" onClick={addInterested} disabled={onclickDisable}>  \n                                {/*show registered' when button is clicked else show interested*/}  \n                                {onclickDisable?'Registered':'Interested'}\n                        </Button>):(<Button size=\"small\" disabled={true}>Registered</Button>)\n\n                    }   \n                    </div>\n    \n                    <div className=\"event__actions\">\n                                                                   {/*share icon*/}\n                            <Button onClick={() => {\n                                                if (navigator.share) {\n                                                    navigator.share({\n                                                            title: document.title,\n                                                            text: title,\n                                                            url: window.location.href + `share/events/${eventId}`,\n                                                        })\n                                                        .then(() => console.log('Successful share'))\n                                                        .catch((error) => console.log('Error sharing', error));\n                                                } else {\n                                                    alert(\"Web Share API is not supported in your browser.\")\n                                                }\n                                            }}>\n                                <ShareIcon fontsize=\"small\" cursor=\"pointer\"> \n                                </ShareIcon> \n                            </Button>\n                    <div className=\"event__interestedInterestedCount\">Interested: {interestedCount}</div>\n                    </div>\n                    <IconButton><SpeakerPhoneIcon style={{color:'white'}}></SpeakerPhoneIcon></IconButton>\n                </div>\n            </Card>\n        </div>\n    )\n}\n\nexport default Event\n\n\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/chat/Message.js",["359","360","361","362"],"//structure of standard message\nimport React,{  useState } from 'react';//forwardRef keeps track of what is changing\nimport {Avatar} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport './Message.css';\nimport {useStateValue} from '../../contexts/StateProvider';\nimport LinesEllipsis from 'react-lines-ellipsis'\nimport responsiveHOC from 'react-lines-ellipsis/lib/responsiveHOC'\n// const ResponsiveEllipsis = responsiveHOC()(LinesEllipsis)\n\nconst useStyles = makeStyles((theme) => ({\n    //keep the avatar size small\n    small: {\n      width: theme.spacing(2),\n      height: theme.spacing(2),\n      fontSize: 'x-small',\n    },\n  }));\n\n//====================================================================================================\n//whenver you are using forwardref first argumnet is the props from the parent component and second parameter is the ref \n//that ref parameter is then assigned to one of the elements of the given function\nconst Message = ({message}) => {\n    //boolean isUser to check whether the user is same as the one logged in \n    // const isUser = username === message.username \n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    const isUser = user.uid === message.author;\n    const classes = useStyles();\n    return (\n        //apply message__user class only if isUser is True\n        <div className={`message ${isUser && 'message__user'}`}>\n            {/*if isUser True then apply 'message_userCard' else apply 'message_guestCard'*/}\n            <div className={isUser ? 'message_userCard': 'message_guestCard' }>\n                <div className=\"message__header\">\n                    <Avatar className={`\"message__avatar\"  ${classes.small}`} alt={isUser?(user.displayName):(message.authorName)} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                    <p className=\"message__username\" variant=\"h\">\n                        {isUser ? 'You': message.authorName || 'Unknown user'}\n                    </p>\n                </div>\n                <div className=\"message__message\">\n                        {/*react-lines-ellipsis component for clamping long messages*/}\n                        {/* <ResponsiveEllipsis\n                        text= {message.text}\n                        maxLine='8'\n                        ellipsis='...'\n                        trimRight\n                        basedOn='letters'\n                        /> */}\n                        {message.text}\n                </div>\n            </div>\n        </div>\n        )\n    \n}\n\nexport default Message;","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/chat/WidgetMember.js",["363","364","365","366","367"],"import React, { Suspense, useEffect, useState } from 'react'\nimport './WidgetMember.css'\nimport { makeStyles} from '@material-ui/core/styles';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport {Badge, ButtonBase} from '@material-ui/core';\nimport {realtime} from '../firebase'\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport firebase from 'firebase/app'\nimport { useStateValue } from '../../contexts/StateProvider';\n\nconst  GetRecentMessage = React.lazy( () =>  import('./GetRecentMessage'))\n//==================================================Card Styles==============================================\nconst useStyles = makeStyles((theme) => ({\n    details: {\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    content: {\n      Bottom:'20px',\n      fontWeight:300,\n      color: 'white',\n      marginBottom:10,\n    },\n    avatar:{\n      width: theme.spacing(4),\n      height: theme.spacing(4),\n      marginTop:10,\n      marginLeft:10,\n      marginBottom:10,\n    },\n    badge: {\n      left:-12,\n      top: 9,\n    },\n  \n  }));\n    \nfunction WidgetMember({lastchatAt,chat_username,chatId}) {\n    // console.log(chat_username,chatId)\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    const classes = useStyles();\n    //to keep the track if the particular chat is online or not\n    const [online,setOnline] = useState('')\n    //get the current user chatting with\n    const [currentChat,setCurrentChat] = useState('')\n    useEffect(() => {\n        //get online/offline users\n   \n        chatId && realtime.ref(`/status/${chatId}`).on('value',snapshot=>{\n                        setOnline(snapshot.val());\n                        // console.log(chatId)\n                        // console.log(snapshot.val())\n                    })\n                  realtime.ref(`'recent_chat'/${user.uid}`).on('value',snapshot=>{\n                    setCurrentChat(snapshot.val());\n                    // console.log(\"CurrentChat \"+currentChat)\n                })    \n                \n                \n        return () => {\n          realtime.ref(`'recent_chat'/${user.uid}`).off()\n        }\n             \n     }, [,chatId,chat_username,online,currentChat])\n\n    const sendClick = () => {\n      realtime.ref(`'last_Seen'/${user.uid}/${chatId}`).set(firebase.database.ServerValue.TIMESTAMP)\n      realtime.ref(`'recent_chat'/${user.uid}`).set({\n        chatId:chatId\n      })\n      // window.location.href=`/chats/${chatId}`\n        // realtime.ref(`/'chats'/${user.uid}/${chatId}`).set({\n        //   last_check_out:firebase.database.ServerValue.TIMESTAMP\n        // })\n    }\n\n     \n    return (\n      //==========================================Get Online members===========================================================\n      <ButtonBase onClick={sendClick} className={\"widgetsChat__online\"}>\n          <div className={chatId!=currentChat?\"widgetsChat__onlineBox\":\"widgetsChat__onlineBoxActive\"}>\n        \n                        <Avatar className={classes.avatar} alt={chat_username} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <Badge\n                              className={classes.badge}\n                               color={online=='online'?\"primary\":\"secondary\"} variant=\"dot\"   \n                                overlap=\"circle\"\n                            ></Badge>\n                        <div className={classes.details}>\n                                <CardContent className={classes.content}>\n                                    <Typography component=\"p\" variant=\"caption\">\n                                        {chat_username}\n                                    </Typography>\n                                    <Suspense fallback={<Skeleton variant=\"text\" />}>\n                                      {/*Get recent message*/}\n                                        <GetRecentMessage currentChat={currentChat} lastchatAt={lastchatAt} chatId={chatId}/>\n                                    </Suspense>\n                               \n                                </CardContent>\n                        </div>\n          </div>\n    </ButtonBase>\n    )\n}\n\nexport default WidgetMember\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/chat/EmojiSelect.js",["368"],"import { Component } from 'react';\nimport { Picker } from 'emoji-mart';\nimport 'emoji-mart/css/emoji-mart.css';\n\nclass EmojiSelect extends Component {\n    constructor(props) {\n        super(props)\n    }\n    \n    handleSelect = (e) => {\n        this.props.addEmojiToInput(e.native)\n        this.props.EmojiMenuVisibility(false)\n        this.props.inputRefCurrent.focus()\n        console.log(e.native)\n    }\n\n    render() {\n        return (\n            <div className=\"emoji-wrapper\">\n                <Picker onSelect={this.handleSelect}/>\n            </div>\n        )\n    }\n  }\nexport default EmojiSelect\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/user/client/YourBookmarks.js",["369","370","371","372","373","374"],"import { Card, CardContent, Typography } from \"@material-ui/core\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport React, { useEffect, useState } from \"react\";\nimport { Suspense } from \"react\";\nimport { useStateValue } from \"../../../contexts/StateProvider\";\nimport { DataBase } from \"../../firebase\";\nimport \"./YourBookmarks.css\";\n\nfunction YourBookmarks() {\n  //get the user from the provider\n  const [{ user }, dispatch] = useStateValue();\n  //store user's event bookmarks\n  const [eventBookmarks, setEventBookmarks] = useState([]);\n  //store user's post bookmarks\n  const [postBookmarks, setPostBookmarks] = useState([]);\n  //lazy loading\n  const BookmarkedPost = React.lazy(() => import(\"../../BookmarkedPost\"));\n  //lazy loading\n  const BookmarkedEvent = React.lazy(() => import(\"../../BookmarkedEvent\"));\n\n  useEffect(() => {\n    if (user) {\n      DataBase.collection(\"users\")\n        .doc(user?.uid)\n        .collection(\"bookmarksPost\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot((snapshot) => {\n          setPostBookmarks(snapshot.docs.map((doc) => doc.data()));\n          console.log(postBookmarks);\n        });\n\n      DataBase.collection(\"users\")\n        .doc(user?.uid)\n        .collection(\"bookmarksEvents\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot((snapshot) => {\n          setEventBookmarks(snapshot.docs.map((doc) => doc.data()));\n        });\n    }\n  }, [, user]);\n  return (\n    <div className=\"bookmarks\">\n      <div className=\"bookmarks__postBookmarks\">\n        {postBookmarks.map((post) => (\n          <Suspense\n            fallback={\n              <div>\n                <Skeleton variant=\"text\" />\n                <Skeleton variant=\"circle\" width={40} height={40} />\n                <Skeleton variant=\"rect\" width={210} height={118} />\n              </div>\n            }\n            key={post.bookmarkPostId}\n          >\n            <BookmarkedPost postId={post.bookmarkPostId} />\n          </Suspense>\n        ))}\n      </div>\n      <div className=\"bookmarks__eventBookmarks\">\n        {eventBookmarks.map((event) => (\n          <Suspense\n            fallback={\n              <div>\n                <Skeleton variant=\"text\" />\n                <Skeleton variant=\"circle\" width={40} height={40} />\n                <Skeleton variant=\"rect\" width={210} height={118} />\n              </div>\n            }\n            key={event.bookmarkEventUserId}\n          >\n            <BookmarkedEvent eventId={event.bookmarkEventUserId} />\n          </Suspense>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default YourBookmarks;\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/confessions/ConfessionsMenu.js",["375"],"import React, { useRef, useState } from \"react\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport Grow from \"@material-ui/core/Grow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Popper from \"@material-ui/core/Popper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport MenuList from \"@material-ui/core/MenuList\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport { DataBase } from \"../firebase\";\nimport { useStateValue } from \"../../contexts/StateProvider\";\nimport firebase from \"firebase/app\";\nimport AlertDialog from \"../AlertDialog\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  paper: {\n    backgroundColor: \"#2E3236\",\n    color: \"aliceblue\",\n  },\n  menuElement: {\n    \"&:hover\": {\n      background: \"#363A3E\",\n    },\n  },\n}));\n\nfunction PostMenu({ confessionId }) {\n  //get the user from the provider\n  const [{ user }, dispatch] = useStateValue();\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const anchorRef = useRef(null);\n  //open alert box when reported\n  const [openAlert, setOpenAlert] = useState(false);\n\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleReport = (e) => {\n    e.preventDefault();\n    //add report collection of the particular post\n    DataBase.collection(\"confessions\")\n      .doc(confessionId)\n      .collection(\"Report\")\n      .doc(user.uid)\n      .set({\n        reportedByUsername: user.displayName,\n        reportedById: user.uid,\n        reportedConfessionId: confessionId,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      });\n    setOpen(false);\n    setOpenAlert(true);\n  };\n  function handleListKeyDown(event) {\n    if (event.key === \"Tab\") {\n      event.preventDefault();\n      setOpen(false);\n    }\n  }\n\n  // return focus to the button when we transitioned from !open -> open\n  const prevOpen = React.useRef(open);\n  React.useEffect(() => {\n    if (prevOpen.current === true && open === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open;\n  }, [open]);\n  return (\n    <div className={classes.root}>\n      <AlertDialog\n        text={\"Thank you for your concern we are looking into the matter!\"}\n        openAlert={openAlert}\n        changeAlert={(al) => {\n          setOpenAlert(al);\n        }}\n      />\n      <MoreVertIcon\n        style={{ color: \"aliceblue\" }}\n        ref={anchorRef}\n        aria-controls={open ? \"menu-list-grow\" : undefined}\n        aria-haspopup=\"true\"\n        onClick={handleToggle}\n      />\n\n      <Popper\n        open={open}\n        anchorEl={anchorRef.current}\n        role={undefined}\n        transition\n        disablePortal\n      >\n        {({ TransitionProps, placement }) => (\n          <Grow\n            {...TransitionProps}\n            style={{\n              transformOrigin:\n                placement === \"bottom\" ? \"center top\" : \"center bottom\",\n            }}\n          >\n            <Paper className={classes.paper}>\n              <ClickAwayListener onClickAway={handleClose}>\n                <MenuList\n                  autoFocusItem={open}\n                  id=\"menu-list-grow\"\n                  onKeyDown={handleListKeyDown}\n                >\n                  <MenuItem\n                    style={{ color: \"#f54242\" }}\n                    className={classes.menuElement}\n                    onClick={handleReport}\n                  >\n                    Report\n                  </MenuItem>\n                </MenuList>\n              </ClickAwayListener>\n            </Paper>\n          </Grow>\n        )}\n      </Popper>\n    </div>\n  );\n}\nexport default PostMenu;\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/user/UserEvents.js",["376","377","378"],"import { Card, CardContent, Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react'\nimport { DataBase } from '../firebase';\nimport './client/YourEvents.css'\n\nfunction UserEvents({palId}) {\n    //store user's events\n    const [events,setEvents] = useState([])\n    //convert date\n    const convertToDate = (date) => {\n        //convert to miliseconds\n        let k = date.seconds*1000\n        let dat = Date(k)\n        dat = new Intl.DateTimeFormat('en-US', {year: 'numeric', month: \"long\" ,day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(k)\n        return dat\n    }\n    //====================================GET user created events=========================================\n    useEffect( () => {\n        //grab the events which belong to the logged in user from the db\n        DataBase.collection('events').where(\"user_id\", \"==\", palId).get()\n        .then((querySnapshot) => {\n            setEvents(querySnapshot.docs.map(doc =>doc.data()))\n            console.log(events)\n        })\n        .catch((error) => {\n            console.log(\"Error getting documents: \", error);\n        });\n        \n    },[,palId]);\n    return (\n        <div className=\"yourevents\">\n            {events.length!=0?(events.map(event=>(\n                    <Card className=\"yourevents__event\" key={event.id}>\n                        <CardContent className=\"yourevents__eventContent\">\n                            <Typography  component={'span'}>Event: {event.title}</Typography>\n                            <Typography  component={'span'}>Date: {convertToDate(event.dateTime)}</Typography>\n                            <Typography  component={'span'}>Venue: {event.venue}</Typography>\n                            <Typography  component={'span'}>Interested people: {event.interestedCount}</Typography>\n                        </CardContent>\n                    </Card>\n            ))):(<h4 style={{color:'aliceblue'}}>Empty.Just like this tab.</h4>)}\n        </div>\n    )\n}\n\nexport default UserEvents\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/Comment.js",["379","380","381"],"/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/user/UserPosts.js",["382","383","384","385","386"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/Info';\nimport { useStateValue } from '../../contexts/StateProvider';\nimport { DataBase } from '../firebase';\nimport './client/YourPosts.css'\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: '#3F4347',\n  },\n  gridList:{\n    flex:1,\n    display: 'flex',\n    justifyContent: 'center',\n    backgroundColor: '#363A3E',\n    overflowY: 'scroll', \n    width:'100%',\n  },\n  icon: {\n    color: 'rgba(255, 255, 255, 0.54)',\n  },\n}));\n\nexport default function UserPosts({palId}) {\n    const classes = useStyles();\n    //posts array\n    const [posts, setPosts] = useState([]);\n//====================================GET user created posts=========================================\n    useEffect( () => {\n        //grab the posts which belong to the logged in user from the db\n        DataBase.collection('posts').where(\"user_id\", \"==\", palId).get()\n        .then((querySnapshot) => {\n            setPosts(querySnapshot.docs.map(doc =>({id:doc.id,post:doc.data()})))\n            console.log(posts)\n        })\n        .catch((error) => {\n            console.log(\"Error getting documents: \", error);\n        });\n        \n    },[,palId]);\n    \n\n  return (\n      <GridList cellHeight={180} className={classes.gridList}>\n            {posts.length!=0?(posts.map((post) => (\n            <GridListTile key={post.id}>\n                <img src={post.post.imageUrl} alt={post.post.caption} />\n                <GridListTileBar\n                title={post.post.caption}\n                actionIcon={\n                    <IconButton aria-label={`info about ${post.post.caption}`} className={classes.icon}>\n                            <InfoIcon />\n                    </IconButton>\n                }\n                />\n            </GridListTile>\n            ))):(<h3 style={{color:'aliceblue'}}>Just like your life, EMPTY</h3>)}\n      </GridList>\n  );\n}\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/events/EventsMenu.js",["387"],"import React, { useRef, useState } from 'react';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport {DataBase} from '../firebase'\nimport {useStateValue} from '../../contexts/StateProvider'\nimport firebase from 'firebase/app'\nimport AlertDialog from '../AlertDialog';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n      zIndex:1000,\n    },\n    paper:{\n      backgroundColor:'#2E3236',\n      color:'aliceblue'\n    },\n    menuElement:{\n      '&:hover': {\n        background: \"#363A3E\",\n     },\n    }\n  }));\n  \nfunction EventsMenu({eventId,eventUsername,eventUserId}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n    const anchorRef = useRef(null);\n    //open alert box when reported\n    const [openAlert,setOpenAlert] = useState(false)\n    //open alert box when bookmarked\n    const [openAlertBook,setOpenAlertBook] = useState(false)\n  \n    const handleToggle = () => {\n      setOpen((prevOpen) => !prevOpen);\n    };\n  \n    const handleClose=()=>{\n      setOpen(false)\n    };\n\n    const handleReport = (e) => {\n        e.preventDefault();\n        //add report collection of the particular post \n        DataBase.collection('events').doc(eventId).collection('Report').doc(user.uid).set(\n            {\n             reportedByUsername:user.displayName,\n             reportedById:user.uid,\n             reportedEventId:eventId,\n             reportedEventUsername:eventUsername,\n             reportedEventUserId:eventUserId,\n             timestamp:firebase.firestore.FieldValue.serverTimestamp()\n            }\n        ) \n      setOpen(false);\n      setOpenAlert(true)\n    };\n    const handleBookmark = (e) => {\n      e.preventDefault();\n      //add bookmark\n      DataBase.collection('users').doc(user.uid).collection('bookmarksEvents').doc(eventId).set(\n          {\n           bookmarkEventUserId:eventId,\n           timestamp:firebase.firestore.FieldValue.serverTimestamp()\n          }\n      ) \n    setOpen(false);\n    setOpenAlertBook(true)\n  };\n  \n    function handleListKeyDown(event) {\n      if (event.key === 'Tab') {\n        event.preventDefault();\n        setOpen(false);\n      }\n    }\n  \n    // return focus to the button when we transitioned from !open -> open\n    const prevOpen = React.useRef(open);\n    React.useEffect(() => {\n      if (prevOpen.current === true && open === false) {\n        anchorRef.current.focus();\n      }\n  \n      prevOpen.current = open;\n    }, [open]);\n    return (\n    <div className={classes.root}>\n      <AlertDialog text={\"Thank you for your concern we are looking into the matter!\"} openAlert={openAlert} changeAlert={al=>{setOpenAlert(al)}}/>\n      <AlertDialog text={\"Added to bookmarks!\"} openAlert={openAlertBook} changeAlert={al=>{setOpenAlertBook(al)}}/>\n          <MoreVertIcon style={{color:'aliceblue'}}  ref={anchorRef}\n          aria-controls={open ? 'menu-list-grow' : undefined}\n          aria-haspopup=\"true\"\n          onClick={handleToggle}/>\n\n        <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\n          {({ TransitionProps, placement }) => (\n            <Grow\n              {...TransitionProps}\n              style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}\n            >\n              <Paper className={classes.paper}>\n                <ClickAwayListener onClickAway={handleClose}>\n                  <MenuList autoFocusItem={open} id=\"menu-list-grow\" onKeyDown={handleListKeyDown}>\n                    <MenuItem style={{color:'#f54242'}}className={classes.menuElement} onClick={handleReport}>Report</MenuItem>\n                    <MenuItem className={classes.menuElement} onClick={handleBookmark}>Bookmark</MenuItem>\n                  </MenuList>\n                </ClickAwayListener>\n              </Paper>\n            </Grow>\n          )}\n        </Popper>\n      </div>\n  );\n}\nexport default EventsMenu\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/chat/GetRecentMessage.js",["388","389","390","391","392","393","394","395","396"],"import { Badge, withStyles } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react'\nimport { useStateValue } from '../../contexts/StateProvider';\nimport { DataBase, realtime } from '../firebase';\nimport './GetRecentMessage.css'\nimport firebase from 'firebase/app'\n\nfunction GetRecentMessage({currentChat,lastchatAt,chatId}) {\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    const [messages,setMessages] = useState([])\n    //count unread messages \n    const [countUnread, setCountUnread] = useState(0)\n    //get recent chat\n    const [recentChat,setRecentChat] = useState('')\n    //get last seen for that chat\n    const [lastSeen,setLastSeen] = useState('')\n    const StyledBadge = withStyles((theme) => ({\n        badge: {\n          right: '-20px',\n          top: 10,\n          marginLeft:'20px',\n          padding: '0 4px',\n        },\n      }))(Badge);\n//======================================================GET Messages==========================================\n//everytime chat_user_id (which is basically the doc id inside the chat collection) changes pull the messages for that chat_user_id from the database\nuseEffect(() => {\n    if (user){\n    if (chatId){\n        let unreadMessages = []\n        //here the chat_user_id (chatId) is taken from the user (user.uid) who posted that particular post to database\n        setTimeout(() => {\n                   //here the chat_user_id (chatId) is taken from the user (user.uid) who posted that particular post to database\n            const messagesArray = [];\n            //fetch the recent message \n            realtime.ref(`/'messages'/${user.uid}/${chatId}`).orderByChild('timestamp').on('value', (snapshot) => {\n    \n                snapshot.forEach((child)=>{\n                    messagesArray.push(child.val())\n                })\n                setMessages(messagesArray.reverse())\n                // console.log(messages[0])\n                // console.log(\"messages array \"+ messagesArray)\n                \n                });\n            realtime.ref(`'recent_chat'/${user.uid}`).on('value', (snapshot) => {\n                setRecentChat(snapshot.val())\n            })\n            realtime.ref(`'last_Seen'/${user.uid}/${chatId}`).on('value', (snapshot) => {\n                setLastSeen(snapshot.val())\n            })\n            setCountUnread(0)\n            if (chatId!=recentChat){\n            //get all the messages which have timestamp > timestamp at which the user checked that chat\n                messagesArray.map((message)=>{\n                message.author != user.uid && message.timestamp>lastSeen && unreadMessages.push(message.timestamp>lastSeen)\n                setCountUnread(unreadMessages.length)\n            })\n            }\n\n\n            // {console.log(\"unreadMessages\"+ unreadMessages)}\n        },500)\n\n    \n    }\n    \n\n\n}\n\n    \n}, [,chatId,messages.length,recentChat,lastSeen])\n    return (\n        <div className=\"getRecentMessage\">\n            {/*later on add count of unread messages*/}\n            {/* {console.log(recentChat)} */}\n            {/*if chatId is the same as the chat with which we are chatting now then unread messages are 0*/}\n        <StyledBadge badgeContent={countUnread} color=\"primary\">\n            {/*Get recent message*/}\n            <p className=\"getRecentMessage__message\" style={{color:'gray',fontSize:'small'}}>{messages.length!=0?(messages[0]?.text.slice(0, 5)):('start a conversation')}</p>\n        </StyledBadge>\n        </div>\n    )\n}\n\nexport default GetRecentMessage\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/posts/PostMenu.js",["397"],"import React, { useRef, useState } from 'react';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport {DataBase} from '../firebase'\nimport {useStateValue} from '../../contexts/StateProvider'\nimport firebase from 'firebase/app'\nimport AlertDialog from '../AlertDialog';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n    },\n    paper:{\n      backgroundColor:'#2E3236',\n      color:'aliceblue'\n    },\n    menuElement:{\n      '&:hover': {\n        background: \"#363A3E\",\n     },\n    }\n  }));\n  \nfunction PostMenu({postId,postUsername,postUserId}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n    const anchorRef = useRef(null);\n    //open alert box when reported\n    const [openAlert,setOpenAlert] = useState(false)\n    //open alert box when bookmarked\n    const [openAlertBook,setOpenAlertBook] = useState(false)\n  \n    const handleToggle = () => {\n      setOpen((prevOpen) => !prevOpen);\n    };\n  \n    const handleClose=()=>{\n      setOpen(false)\n    };\n\n    const handleReport = (e) => {\n        e.preventDefault();\n        //add report collection of the particular post \n        DataBase.collection('posts').doc(postId).collection('Report').doc(user.uid).set(\n            {\n             reportedByUsername:user.displayName,\n             reportedById:user.uid,\n             reportedPostId:postId,\n             reportedPostUsername:postUsername,\n             reportedPostUserId:postUserId,\n             timestamp:firebase.firestore.FieldValue.serverTimestamp()\n            }\n        ) \n      setOpen(false);\n      setOpenAlert(true)\n    };\n    const handleBookmark = (e) => {\n      e.preventDefault();\n      //add bookmark\n      DataBase.collection('users').doc(user.uid).collection('bookmarksPost').doc(postId).set(\n          {\n           bookmarkPostId:postId,\n           timestamp:firebase.firestore.FieldValue.serverTimestamp()\n          }\n      ) \n    setOpen(false);\n    setOpenAlertBook(true)\n  };\n  \n    function handleListKeyDown(event) {\n      if (event.key === 'Tab') {\n        event.preventDefault();\n        setOpen(false);\n      }\n    }\n  \n    // return focus to the button when we transitioned from !open -> open\n    const prevOpen = React.useRef(open);\n    React.useEffect(() => {\n      if (prevOpen.current === true && open === false) {\n        anchorRef.current.focus();\n      }\n  \n      prevOpen.current = open;\n    }, [open]);\n    return (\n    <div className={classes.root}>\n      <AlertDialog text={\"Thank you for your concern we are looking into the matter!\"} openAlert={openAlert} changeAlert={al=>{setOpenAlert(al)}}/>\n      <AlertDialog text={\"Added to bookmarks!\"} openAlert={openAlertBook} changeAlert={al=>{setOpenAlertBook(al)}}/>\n          <MoreVertIcon style={{color:'aliceblue'}}  ref={anchorRef}\n          aria-controls={open ? 'menu-list-grow' : undefined}\n          aria-haspopup=\"true\"\n          onClick={handleToggle}/>\n\n        <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\n          {({ TransitionProps, placement }) => (\n            <Grow\n              {...TransitionProps}\n              style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}\n            >\n              <Paper className={classes.paper}>\n                <ClickAwayListener onClickAway={handleClose}>\n                  <MenuList autoFocusItem={open} id=\"menu-list-grow\" onKeyDown={handleListKeyDown}>\n                    <MenuItem style={{color:'#f54242'}}className={classes.menuElement} onClick={handleReport}>Report</MenuItem>\n                    <MenuItem className={classes.menuElement} onClick={handleBookmark}>Bookmark</MenuItem>\n                  </MenuList>\n                </ClickAwayListener>\n              </Paper>\n            </Grow>\n          )}\n        </Popper>\n      </div>\n  );\n}\nexport default PostMenu\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/user/client/YourEvents.js",["398","399","400","401"],"import { Card, CardContent, Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react'\nimport { useStateValue } from '../../../contexts/StateProvider';\nimport { DataBase } from '../../firebase';\nimport './YourEvents.css'\n\nfunction YourEvents() {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //store user's events\n    const [events,setEvents] = useState([])\n    //convert date\n    const convertToDate = (date) => {\n        //convert to miliseconds\n        let k = date.seconds*1000\n        let dat = Date(k)\n        dat = new Intl.DateTimeFormat('en-US', {year: 'numeric', month: \"long\" ,day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(k)\n        return dat\n    }\n    //====================================GET user created events=========================================\n    useEffect( () => {\n        if (user){\n        //grab the events which belong to the logged in user from the db\n        DataBase.collection('events').where(\"user_id\", \"==\", user?.uid).get()\n        .then((querySnapshot) => {\n            setEvents(querySnapshot.docs.map(doc =>doc.data()))\n            console.log(events)\n        })\n        .catch((error) => {\n            console.log(\"Error getting documents: \", error);\n        });\n    }\n    },[,user]);\n    return (\n        <div className=\"yourevents\">\n            {events.length!=0?(events.map(event=>(\n                    <Card className=\"yourevents__event\" key={event.id}>\n                        <CardContent className=\"yourevents__eventContent\">\n                            <Typography  component={'span'}>Event: {event.title}</Typography>\n                            <Typography  component={'span'}>Date: {convertToDate(event.dateTime)}</Typography>\n                            <Typography  component={'span'}>Venue: {event.venue}</Typography>\n                            <Typography  component={'span'}>Interested people: {event.interestedCount}</Typography>\n                        </CardContent>\n                    </Card>\n            ))):(<h4 style={{color:'aliceblue'}}>Empty. Nothing to see here.</h4>)}\n        </div>\n    )\n}\n\nexport default YourEvents\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/user/client/YourPosts.js",["402","403","404","405","406","407"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/Info';\nimport { useStateValue } from '../../../contexts/StateProvider';\nimport { DataBase } from '../../firebase';\nimport './YourPosts.css'\nimport { Link } from 'react-router-dom';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: '#3F4347',\n  },\n  gridList:{\n    flex:1,\n    display: 'flex',\n    justifyContent: 'center',\n    backgroundColor: '#363A3E',\n    overflowY: 'scroll', \n    width:'100%',\n  },\n  icon: {\n    color: 'rgba(255, 255, 255, 0.54)',\n  },\n}));\n\nexport default function YourPosts() {\n    const classes = useStyles();\n\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //posts array\n    const [posts, setPosts] = useState([]);\n//====================================GET user created posts=========================================\n    useEffect( () => {\n      if (user){\n        //grab the posts which belong to the logged in user from the db\n        DataBase.collection('posts').where(\"user_id\", \"==\", user?.uid).get()\n        .then((querySnapshot) => {\n            setPosts(querySnapshot.docs.map(doc =>({id:doc.id,post:doc.data()})))\n            console.log(posts)\n        })\n        .catch((error) => {\n            console.log(\"Error getting documents: \", error);\n        });\n              }\n    },[,user]);\n    \n\n  return (\n    <div className=\"yourPosts\">\n      <GridList cellHeight={180} className={classes.gridList}>\n            {posts.length!=0?(                            \n            posts.filter(post=>(post.post.imageUrl!='no-image')).map((post) => (\n            <GridListTile key={post.id}>\n                <img src={post.post.imageUrl} alt={post.post.caption} />\n                <Link to={`/yourposts/${post.id}`}>\n                <GridListTileBar\n                title={post.post.caption}\n                actionIcon={\n                    <IconButton aria-label={`info about ${post.post.caption}`} className={classes.icon}>\n                            <InfoIcon />\n                    </IconButton>\n                }\n                />\n                </Link>\n            </GridListTile>\n            ))):(<h4 style={{color:'aliceblue'}}>Empty. Nothing to see here</h4>)}\n      </GridList>\n    </div>\n  );\n}\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/BookmarkedEvent.js",["408","409","410"],"import React, { useEffect, useState } from 'react'\nimport { useStateValue } from '../contexts/StateProvider';\nimport { DataBase } from './firebase';\nimport Event from './events/Event';\n\n\n\nfunction BookmarkedEvent({eventId}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    const [eventToBookmark, setEventToBookmark] = useState([])\n    //====================================Event changes listner=========================================\n    useEffect( () => {\n        //onSnapshot = listner to changes in event \n        //everytime the events change run this code\n        //grab the collection 'events' from the database with doc = eventId \n        DataBase.collection('events').doc(eventId).get().then((doc) => {\n            setEventToBookmark(doc.data())\n            console.log(eventToBookmark)\n        }).catch((err)=>(alert(err)))\n    },[,user,eventId]);\n    return (\n        <div className=\"bookmarkedEvent\">\n            <Event eventId={eventId} dateTime={eventToBookmark.dateTime} venue={eventToBookmark.venue} title={eventToBookmark.title} username={eventToBookmark.username} user_id={eventToBookmark.user_id} description={eventToBookmark.description} imageUrl={eventToBookmark.imageUrl} interestedCount={eventToBookmark.interestedCount}/>\n        </div>\n    )\n}\n\nexport default BookmarkedEvent\n","/Users/deeptej/Desktop/react/MyPal-dev/client/src/components/BookmarkedPost.js",["411","412","413"],"import React, { useEffect, useState } from 'react'\nimport { useStateValue } from '../contexts/StateProvider';\nimport { DataBase } from './firebase';\nimport Post from './posts/Post';\n\n\n\nfunction BookmarkedPost({postId}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    const [postToBookmark, setPostToBookmark] = useState([])\n    //====================================Post changes listner=========================================\n    useEffect( () => {\n        //onSnapshot = listner to changes in posts \n        //everytime the posts change run this code\n        //grab the collection 'posts' from the database with doc = postId \n        DataBase.collection('posts').doc(postId).get().then((doc) => {\n            setPostToBookmark(doc.data())\n            console.log(postToBookmark)\n        }).catch((err)=>(alert(err)))\n    },[,user,postId]);\n    return (\n        <div className=\"bookmarkedPost\">\n             <Post postId={postId} username={postToBookmark?.username} user_id={postToBookmark?.user_id} caption={postToBookmark?.caption} imageUrl={postToBookmark?.imageUrl} likesCount={postToBookmark?.likesCount}/>\n        </div>\n    )\n}\n\nexport default BookmarkedPost\n",{"ruleId":"414","replacedBy":"415"},{"ruleId":"416","replacedBy":"417"},{"ruleId":"418","severity":1,"message":"419","line":1,"column":45,"nodeType":"420","messageId":"421","endLine":1,"endColumn":49},{"ruleId":"418","severity":1,"message":"422","line":6,"column":26,"nodeType":"420","messageId":"421","endLine":6,"endColumn":34},{"ruleId":"418","severity":1,"message":"423","line":12,"column":8,"nodeType":"420","messageId":"421","endLine":12,"endColumn":12},{"ruleId":"418","severity":1,"message":"424","line":16,"column":8,"nodeType":"420","messageId":"421","endLine":16,"endColumn":19},{"ruleId":"418","severity":1,"message":"425","line":27,"column":10,"nodeType":"420","messageId":"421","endLine":27,"endColumn":18},{"ruleId":"418","severity":1,"message":"426","line":28,"column":10,"nodeType":"420","messageId":"421","endLine":28,"endColumn":27},{"ruleId":"418","severity":1,"message":"427","line":36,"column":10,"nodeType":"420","messageId":"421","endLine":36,"endColumn":15},{"ruleId":"428","severity":1,"message":"429","line":94,"column":10,"nodeType":"430","messageId":"431","endLine":94,"endColumn":12},{"ruleId":"418","severity":1,"message":"432","line":103,"column":10,"nodeType":"420","messageId":"421","endLine":103,"endColumn":22},{"ruleId":"418","severity":1,"message":"433","line":103,"column":23,"nodeType":"420","messageId":"421","endLine":103,"endColumn":38},{"ruleId":"418","severity":1,"message":"434","line":115,"column":10,"nodeType":"420","messageId":"421","endLine":115,"endColumn":16},{"ruleId":"418","severity":1,"message":"435","line":115,"column":17,"nodeType":"420","messageId":"421","endLine":115,"endColumn":26},{"ruleId":"418","severity":1,"message":"436","line":121,"column":10,"nodeType":"420","messageId":"421","endLine":121,"endColumn":22},{"ruleId":"418","severity":1,"message":"437","line":121,"column":24,"nodeType":"420","messageId":"421","endLine":121,"endColumn":37},{"ruleId":"418","severity":1,"message":"438","line":123,"column":10,"nodeType":"420","messageId":"421","endLine":123,"endColumn":14},{"ruleId":"439","severity":1,"message":"440","line":159,"column":28,"nodeType":"441","endLine":159,"endColumn":56},{"ruleId":"418","severity":1,"message":"442","line":190,"column":11,"nodeType":"420","messageId":"421","endLine":190,"endColumn":22},{"ruleId":"439","severity":1,"message":"443","line":195,"column":17,"nodeType":"444","endLine":195,"endColumn":29},{"ruleId":"418","severity":1,"message":"445","line":242,"column":7,"nodeType":"420","messageId":"421","endLine":242,"endColumn":23},{"ruleId":"446","severity":1,"message":"447","line":353,"column":21,"nodeType":"448","messageId":"449","endLine":353,"endColumn":22},{"ruleId":"418","severity":1,"message":"450","line":16,"column":20,"nodeType":"420","messageId":"421","endLine":16,"endColumn":28},{"ruleId":"418","severity":1,"message":"451","line":3,"column":8,"nodeType":"420","messageId":"421","endLine":3,"endColumn":12},{"ruleId":"418","severity":1,"message":"452","line":4,"column":8,"nodeType":"420","messageId":"421","endLine":4,"endColumn":19},{"ruleId":"418","severity":1,"message":"453","line":6,"column":8,"nodeType":"420","messageId":"421","endLine":6,"endColumn":18},{"ruleId":"418","severity":1,"message":"454","line":8,"column":8,"nodeType":"420","messageId":"421","endLine":8,"endColumn":20},{"ruleId":"418","severity":1,"message":"455","line":48,"column":8,"nodeType":"420","messageId":"421","endLine":48,"endColumn":21},{"ruleId":"418","severity":1,"message":"456","line":48,"column":23,"nodeType":"420","messageId":"421","endLine":48,"endColumn":39},{"ruleId":"439","severity":1,"message":"457","line":65,"column":4,"nodeType":"458","endLine":65,"endColumn":11,"suggestions":"459"},{"ruleId":"460","severity":1,"message":"461","line":65,"column":4,"nodeType":"458","messageId":"462","endLine":65,"endColumn":11},{"ruleId":"418","severity":1,"message":"463","line":1,"column":24,"nodeType":"420","messageId":"421","endLine":1,"endColumn":34},{"ruleId":"418","severity":1,"message":"450","line":14,"column":20,"nodeType":"420","messageId":"421","endLine":14,"endColumn":28},{"ruleId":"464","severity":1,"message":"465","line":26,"column":29,"nodeType":"448","messageId":"431","endLine":26,"endColumn":31},{"ruleId":"466","severity":1,"message":"467","line":148,"column":34,"nodeType":"468","endLine":148,"endColumn":133},{"ruleId":"418","severity":1,"message":"450","line":13,"column":20,"nodeType":"420","messageId":"421","endLine":13,"endColumn":28},{"ruleId":"464","severity":1,"message":"465","line":25,"column":27,"nodeType":"448","messageId":"431","endLine":25,"endColumn":29},{"ruleId":"466","severity":1,"message":"467","line":173,"column":13,"nodeType":"468","endLine":178,"endColumn":15},{"ruleId":"418","severity":1,"message":"469","line":4,"column":8,"nodeType":"420","messageId":"421","endLine":4,"endColumn":18},{"ruleId":"418","severity":1,"message":"470","line":6,"column":8,"nodeType":"420","messageId":"421","endLine":6,"endColumn":29},{"ruleId":"418","severity":1,"message":"471","line":7,"column":8,"nodeType":"420","messageId":"421","endLine":7,"endColumn":23},{"ruleId":"418","severity":1,"message":"472","line":11,"column":8,"nodeType":"420","messageId":"421","endLine":11,"endColumn":21},{"ruleId":"418","severity":1,"message":"473","line":14,"column":27,"nodeType":"420","messageId":"421","endLine":14,"endColumn":33},{"ruleId":"474","severity":1,"message":"475","line":21,"column":5,"nodeType":"476","messageId":"431","endLine":21,"endColumn":15},{"ruleId":"418","severity":1,"message":"477","line":1,"column":17,"nodeType":"420","messageId":"421","endLine":1,"endColumn":25},{"ruleId":"418","severity":1,"message":"478","line":12,"column":9,"nodeType":"420","messageId":"421","endLine":12,"endColumn":22},{"ruleId":"418","severity":1,"message":"479","line":20,"column":7,"nodeType":"420","messageId":"421","endLine":20,"endColumn":16},{"ruleId":"418","severity":1,"message":"480","line":7,"column":25,"nodeType":"420","messageId":"421","endLine":7,"endColumn":36},{"ruleId":"418","severity":1,"message":"450","line":15,"column":20,"nodeType":"420","messageId":"421","endLine":15,"endColumn":28},{"ruleId":"418","severity":1,"message":"481","line":8,"column":9,"nodeType":"420","messageId":"421","endLine":8,"endColumn":17},{"ruleId":"418","severity":1,"message":"482","line":11,"column":8,"nodeType":"420","messageId":"421","endLine":11,"endColumn":16},{"ruleId":"418","severity":1,"message":"450","line":53,"column":20,"nodeType":"420","messageId":"421","endLine":53,"endColumn":28},{"ruleId":"418","severity":1,"message":"483","line":54,"column":11,"nodeType":"420","messageId":"421","endLine":54,"endColumn":18},{"ruleId":"460","severity":1,"message":"461","line":85,"column":8,"nodeType":"458","messageId":"462","endLine":85,"endColumn":28},{"ruleId":"418","severity":1,"message":"450","line":11,"column":16,"nodeType":"420","messageId":"421","endLine":11,"endColumn":24},{"ruleId":"418","severity":1,"message":"450","line":9,"column":16,"nodeType":"420","messageId":"421","endLine":9,"endColumn":24},{"ruleId":"418","severity":1,"message":"450","line":20,"column":20,"nodeType":"420","messageId":"421","endLine":20,"endColumn":28},{"ruleId":"460","severity":1,"message":"461","line":64,"column":4,"nodeType":"458","messageId":"462","endLine":64,"endColumn":27},{"ruleId":"418","severity":1,"message":"450","line":12,"column":16,"nodeType":"420","messageId":"421","endLine":12,"endColumn":24},{"ruleId":"418","severity":1,"message":"450","line":12,"column":20,"nodeType":"420","messageId":"421","endLine":12,"endColumn":28},{"ruleId":"439","severity":1,"message":"484","line":27,"column":6,"nodeType":"458","endLine":27,"endColumn":23,"suggestions":"485"},{"ruleId":"460","severity":1,"message":"461","line":27,"column":6,"nodeType":"458","messageId":"462","endLine":27,"endColumn":23},{"ruleId":"418","severity":1,"message":"450","line":15,"column":20,"nodeType":"420","messageId":"421","endLine":15,"endColumn":28},{"ruleId":"466","severity":1,"message":"467","line":150,"column":43,"nodeType":"468","endLine":150,"endColumn":120},{"ruleId":"418","severity":1,"message":"450","line":12,"column":20,"nodeType":"420","messageId":"421","endLine":12,"endColumn":28},{"ruleId":"439","severity":1,"message":"486","line":23,"column":7,"nodeType":"458","endLine":23,"endColumn":27,"suggestions":"487"},{"ruleId":"460","severity":1,"message":"461","line":23,"column":7,"nodeType":"458","messageId":"462","endLine":23,"endColumn":27},{"ruleId":"418","severity":1,"message":"450","line":11,"column":20,"nodeType":"420","messageId":"421","endLine":11,"endColumn":28},{"ruleId":"418","severity":1,"message":"451","line":4,"column":8,"nodeType":"420","messageId":"421","endLine":4,"endColumn":12},{"ruleId":"418","severity":1,"message":"453","line":6,"column":8,"nodeType":"420","messageId":"421","endLine":6,"endColumn":18},{"ruleId":"418","severity":1,"message":"454","line":8,"column":8,"nodeType":"420","messageId":"421","endLine":8,"endColumn":20},{"ruleId":"418","severity":1,"message":"488","line":10,"column":18,"nodeType":"420","messageId":"421","endLine":10,"endColumn":23},{"ruleId":"418","severity":1,"message":"489","line":11,"column":10,"nodeType":"420","messageId":"421","endLine":11,"endColumn":14},{"ruleId":"418","severity":1,"message":"455","line":59,"column":10,"nodeType":"420","messageId":"421","endLine":59,"endColumn":23},{"ruleId":"418","severity":1,"message":"456","line":59,"column":25,"nodeType":"420","messageId":"421","endLine":59,"endColumn":41},{"ruleId":"418","severity":1,"message":"490","line":61,"column":10,"nodeType":"420","messageId":"421","endLine":61,"endColumn":13},{"ruleId":"418","severity":1,"message":"491","line":61,"column":14,"nodeType":"420","messageId":"421","endLine":61,"endColumn":20},{"ruleId":"418","severity":1,"message":"450","line":12,"column":20,"nodeType":"420","messageId":"421","endLine":12,"endColumn":28},{"ruleId":"439","severity":1,"message":"492","line":23,"column":7,"nodeType":"458","endLine":23,"endColumn":21,"suggestions":"493"},{"ruleId":"460","severity":1,"message":"461","line":23,"column":7,"nodeType":"458","messageId":"462","endLine":23,"endColumn":21},{"ruleId":"418","severity":1,"message":"494","line":8,"column":7,"nodeType":"420","messageId":"421","endLine":8,"endColumn":16},{"ruleId":"418","severity":1,"message":"495","line":2,"column":18,"nodeType":"420","messageId":"421","endLine":2,"endColumn":27},{"ruleId":"418","severity":1,"message":"496","line":12,"column":10,"nodeType":"420","messageId":"421","endLine":12,"endColumn":14},{"ruleId":"418","severity":1,"message":"450","line":23,"column":20,"nodeType":"420","messageId":"421","endLine":23,"endColumn":28},{"ruleId":"418","severity":1,"message":"497","line":42,"column":9,"nodeType":"420","messageId":"421","endLine":42,"endColumn":22},{"ruleId":"439","severity":1,"message":"498","line":144,"column":6,"nodeType":"458","endLine":144,"endColumn":28,"suggestions":"499"},{"ruleId":"460","severity":1,"message":"461","line":144,"column":6,"nodeType":"458","messageId":"462","endLine":144,"endColumn":28},{"ruleId":"418","severity":1,"message":"494","line":49,"column":7,"nodeType":"420","messageId":"421","endLine":49,"endColumn":16},{"ruleId":"418","severity":1,"message":"500","line":50,"column":7,"nodeType":"420","messageId":"421","endLine":50,"endColumn":21},{"ruleId":"418","severity":1,"message":"450","line":57,"column":20,"nodeType":"420","messageId":"421","endLine":57,"endColumn":28},{"ruleId":"418","severity":1,"message":"501","line":77,"column":10,"nodeType":"420","messageId":"421","endLine":77,"endColumn":20},{"ruleId":"418","severity":1,"message":"502","line":80,"column":10,"nodeType":"420","messageId":"421","endLine":80,"endColumn":13},{"ruleId":"418","severity":1,"message":"503","line":80,"column":15,"nodeType":"420","messageId":"421","endLine":80,"endColumn":21},{"ruleId":"418","severity":1,"message":"504","line":91,"column":9,"nodeType":"420","messageId":"421","endLine":91,"endColumn":13},{"ruleId":"418","severity":1,"message":"505","line":106,"column":9,"nodeType":"420","messageId":"421","endLine":106,"endColumn":30},{"ruleId":"418","severity":1,"message":"497","line":110,"column":9,"nodeType":"420","messageId":"421","endLine":110,"endColumn":22},{"ruleId":"439","severity":1,"message":"506","line":203,"column":6,"nodeType":"458","endLine":203,"endColumn":16,"suggestions":"507"},{"ruleId":"460","severity":1,"message":"461","line":203,"column":6,"nodeType":"458","messageId":"462","endLine":203,"endColumn":16},{"ruleId":"439","severity":1,"message":"508","line":233,"column":6,"nodeType":"458","endLine":233,"endColumn":29,"suggestions":"509"},{"ruleId":"460","severity":1,"message":"461","line":233,"column":6,"nodeType":"458","messageId":"462","endLine":233,"endColumn":29},{"ruleId":"460","severity":1,"message":"461","line":256,"column":6,"nodeType":"458","messageId":"462","endLine":256,"endColumn":23},{"ruleId":"464","severity":1,"message":"510","line":406,"column":28,"nodeType":"448","messageId":"431","endLine":406,"endColumn":30},{"ruleId":"446","severity":1,"message":"447","line":445,"column":46,"nodeType":"448","messageId":"449","endLine":445,"endColumn":47},{"ruleId":"418","severity":1,"message":"511","line":5,"column":8,"nodeType":"420","messageId":"421","endLine":5,"endColumn":19},{"ruleId":"418","severity":1,"message":"450","line":39,"column":20,"nodeType":"420","messageId":"421","endLine":39,"endColumn":28},{"ruleId":"439","severity":1,"message":"512","line":77,"column":4,"nodeType":"458","endLine":77,"endColumn":24,"suggestions":"513"},{"ruleId":"418","severity":1,"message":"477","line":2,"column":17,"nodeType":"420","messageId":"421","endLine":2,"endColumn":25},{"ruleId":"418","severity":1,"message":"514","line":7,"column":8,"nodeType":"420","messageId":"421","endLine":7,"endColumn":21},{"ruleId":"418","severity":1,"message":"515","line":8,"column":8,"nodeType":"420","messageId":"421","endLine":8,"endColumn":21},{"ruleId":"418","severity":1,"message":"450","line":27,"column":20,"nodeType":"420","messageId":"421","endLine":27,"endColumn":28},{"ruleId":"418","severity":1,"message":"450","line":43,"column":20,"nodeType":"420","messageId":"421","endLine":43,"endColumn":28},{"ruleId":"439","severity":1,"message":"512","line":67,"column":9,"nodeType":"458","endLine":67,"endColumn":51,"suggestions":"516"},{"ruleId":"460","severity":1,"message":"461","line":67,"column":9,"nodeType":"458","messageId":"462","endLine":67,"endColumn":51},{"ruleId":"464","severity":1,"message":"465","line":84,"column":33,"nodeType":"448","messageId":"431","endLine":84,"endColumn":35},{"ruleId":"464","severity":1,"message":"510","line":89,"column":45,"nodeType":"448","messageId":"431","endLine":89,"endColumn":47},{"ruleId":"517","severity":1,"message":"518","line":6,"column":5,"nodeType":"519","messageId":"520","endLine":8,"endColumn":6},{"ruleId":"418","severity":1,"message":"451","line":1,"column":10,"nodeType":"420","messageId":"421","endLine":1,"endColumn":14},{"ruleId":"418","severity":1,"message":"452","line":1,"column":16,"nodeType":"420","messageId":"421","endLine":1,"endColumn":27},{"ruleId":"418","severity":1,"message":"521","line":1,"column":29,"nodeType":"420","messageId":"421","endLine":1,"endColumn":39},{"ruleId":"418","severity":1,"message":"450","line":11,"column":20,"nodeType":"420","messageId":"421","endLine":11,"endColumn":28},{"ruleId":"439","severity":1,"message":"522","line":40,"column":6,"nodeType":"458","endLine":40,"endColumn":14,"suggestions":"523"},{"ruleId":"460","severity":1,"message":"461","line":40,"column":6,"nodeType":"458","messageId":"462","endLine":40,"endColumn":14},{"ruleId":"418","severity":1,"message":"450","line":32,"column":20,"nodeType":"420","messageId":"421","endLine":32,"endColumn":28},{"ruleId":"439","severity":1,"message":"524","line":29,"column":7,"nodeType":"458","endLine":29,"endColumn":15,"suggestions":"525"},{"ruleId":"460","severity":1,"message":"461","line":29,"column":7,"nodeType":"458","messageId":"462","endLine":29,"endColumn":15},{"ruleId":"464","severity":1,"message":"465","line":32,"column":27,"nodeType":"448","messageId":"431","endLine":32,"endColumn":29},{"ruleId":"418","severity":1,"message":"450","line":15,"column":20,"nodeType":"420","messageId":"421","endLine":15,"endColumn":28},{"ruleId":"439","severity":1,"message":"526","line":32,"column":6,"nodeType":"458","endLine":32,"endColumn":24,"suggestions":"527"},{"ruleId":"460","severity":1,"message":"461","line":32,"column":6,"nodeType":"458","messageId":"462","endLine":32,"endColumn":24},{"ruleId":"418","severity":1,"message":"528","line":6,"column":8,"nodeType":"420","messageId":"421","endLine":6,"endColumn":21},{"ruleId":"418","severity":1,"message":"529","line":9,"column":10,"nodeType":"420","messageId":"421","endLine":9,"endColumn":23},{"ruleId":"439","severity":1,"message":"530","line":47,"column":7,"nodeType":"458","endLine":47,"endColumn":15,"suggestions":"531"},{"ruleId":"460","severity":1,"message":"461","line":47,"column":7,"nodeType":"458","messageId":"462","endLine":47,"endColumn":15},{"ruleId":"464","severity":1,"message":"465","line":52,"column":26,"nodeType":"448","messageId":"431","endLine":52,"endColumn":28},{"ruleId":"418","severity":1,"message":"450","line":33,"column":20,"nodeType":"420","messageId":"421","endLine":33,"endColumn":28},{"ruleId":"418","severity":1,"message":"481","line":4,"column":10,"nodeType":"420","messageId":"421","endLine":4,"endColumn":18},{"ruleId":"418","severity":1,"message":"532","line":6,"column":8,"nodeType":"420","messageId":"421","endLine":6,"endColumn":16},{"ruleId":"418","severity":1,"message":"450","line":10,"column":20,"nodeType":"420","messageId":"421","endLine":10,"endColumn":28},{"ruleId":"464","severity":1,"message":"465","line":54,"column":23,"nodeType":"448","messageId":"431","endLine":54,"endColumn":25},{"ruleId":"533","severity":1,"message":"534","line":56,"column":44,"nodeType":"535","messageId":"536","endLine":56,"endColumn":46},{"ruleId":"464","severity":1,"message":"465","line":57,"column":32,"nodeType":"448","messageId":"431","endLine":57,"endColumn":34},{"ruleId":"439","severity":1,"message":"537","line":74,"column":4,"nodeType":"458","endLine":74,"endColumn":49,"suggestions":"538"},{"ruleId":"460","severity":1,"message":"461","line":74,"column":4,"nodeType":"458","messageId":"462","endLine":74,"endColumn":49},{"ruleId":"464","severity":1,"message":"465","line":82,"column":110,"nodeType":"448","messageId":"431","endLine":82,"endColumn":112},{"ruleId":"418","severity":1,"message":"450","line":32,"column":20,"nodeType":"420","messageId":"421","endLine":32,"endColumn":28},{"ruleId":"418","severity":1,"message":"450","line":9,"column":20,"nodeType":"420","messageId":"421","endLine":9,"endColumn":28},{"ruleId":"439","severity":1,"message":"524","line":33,"column":7,"nodeType":"458","endLine":33,"endColumn":14,"suggestions":"539"},{"ruleId":"460","severity":1,"message":"461","line":33,"column":7,"nodeType":"458","messageId":"462","endLine":33,"endColumn":14},{"ruleId":"464","severity":1,"message":"465","line":36,"column":27,"nodeType":"448","messageId":"431","endLine":36,"endColumn":29},{"ruleId":"418","severity":1,"message":"528","line":6,"column":8,"nodeType":"420","messageId":"421","endLine":6,"endColumn":21},{"ruleId":"418","severity":1,"message":"450","line":36,"column":20,"nodeType":"420","messageId":"421","endLine":36,"endColumn":28},{"ruleId":"439","severity":1,"message":"530","line":52,"column":7,"nodeType":"458","endLine":52,"endColumn":14,"suggestions":"540"},{"ruleId":"460","severity":1,"message":"461","line":52,"column":7,"nodeType":"458","messageId":"462","endLine":52,"endColumn":14},{"ruleId":"464","severity":1,"message":"465","line":58,"column":26,"nodeType":"448","messageId":"431","endLine":58,"endColumn":28},{"ruleId":"464","severity":1,"message":"465","line":59,"column":51,"nodeType":"448","messageId":"431","endLine":59,"endColumn":53},{"ruleId":"418","severity":1,"message":"450","line":10,"column":20,"nodeType":"420","messageId":"421","endLine":10,"endColumn":28},{"ruleId":"439","severity":1,"message":"541","line":21,"column":7,"nodeType":"458","endLine":21,"endColumn":22,"suggestions":"542"},{"ruleId":"460","severity":1,"message":"461","line":21,"column":7,"nodeType":"458","messageId":"462","endLine":21,"endColumn":22},{"ruleId":"418","severity":1,"message":"450","line":10,"column":20,"nodeType":"420","messageId":"421","endLine":10,"endColumn":28},{"ruleId":"439","severity":1,"message":"543","line":21,"column":7,"nodeType":"458","endLine":21,"endColumn":21,"suggestions":"544"},{"ruleId":"460","severity":1,"message":"461","line":21,"column":7,"nodeType":"458","messageId":"462","endLine":21,"endColumn":21},"no-native-reassign",["545"],"no-negated-in-lhs",["546"],"no-unused-vars","'lazy' is defined but never used.","Identifier","unusedVar","'Backdrop' is defined but never used.","'Chat' is defined but never used.","'SendMessage' is defined but never used.","'getToken' is defined but never used.","'onMessageListener' is defined but never used.","'Alert' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'openRequired' is assigned a value but never used.","'setOpenRequired' is assigned a value but never used.","'userId' is assigned a value but never used.","'setUserId' is assigned a value but never used.","'isTokenFound' is assigned a value but never used.","'setTokenFound' is assigned a value but never used.","'show' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'userFromLocalStorage' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'unsubscribe' is assigned a value but never used.","Assignments to the 'user_Id' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","'handleCloseNotif' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'dispatch' is assigned a value but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'IconButton' is defined but never used.","'MoreVertIcon' is defined but never used.","'numberOfPosts' is assigned a value but never used.","'setNumberOfPosts' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userInfo'. Either include it or remove the dependency array.","ArrayExpression",["547"],"no-sparse-arrays","Unexpected comma in middle of array.","unexpectedSparseArray","'useContext' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'SearchIcon' is defined but never used.","'NotificationsNoneIcon' is defined but never used.","'MailOutlineIcon' is defined but never used.","'MoreHorizIcon' is defined but never used.","'Router' is defined but never used.","no-dupe-keys","Duplicate key 'background'.","ObjectExpression","'useState' is defined but never used.","'BrowserRouter' is defined but never used.","'navValues' is assigned a value but never used.","'MicOutlined' is defined but never used.","'DataBase' is defined but never used.","'FlipMove' is defined but never used.","'classes' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'eventToShare'. Either include it or remove the dependency array.",["548"],"React Hook useEffect has a missing dependency: 'confessionToShare'. Either include it or remove the dependency array.",["549"],"'Input' is defined but never used.","'auth' is defined but never used.","'bio' is assigned a value but never used.","'setBio' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'postToShare'. Either include it or remove the dependency array.",["550"],"'useStyles' is assigned a value but never used.","'TextField' is defined but never used.","'Link' is defined but never used.","'convertToDate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'confessionComments', 'like', and 'likeCount'. Either include them or remove the dependency array.",["551"],"'StyledDateTime' is assigned a value but never used.","'modalStyle' is assigned a value but never used.","'uid' is assigned a value but never used.","'setUid' is assigned a value but never used.","'open' is assigned a value but never used.","'handleHoverModalClose' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'like', 'likeCount', and 'user.uid'. Either include them or remove the dependency array.",["552"],"React Hook useEffect has missing dependencies: 'chats_array' and 'user_id'. Either include them or remove the dependency array. If 'setIsPresent' needs the current value of 'user_id', you can also switch to useReducer instead of useState and read 'user_id' in the reducer.",["553"],"Expected '===' and instead saw '=='.","'CardActions' is defined but never used.","React Hook useEffect has a missing dependency: 'user.uid'. Either include it or remove the dependency array.",["554"],"'LinesEllipsis' is defined but never used.","'responsiveHOC' is defined but never used.",["555"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Typography' is defined but never used.","React Hook useEffect has a missing dependency: 'postBookmarks'. Either include it or remove the dependency array.",["556"],"React Hook useEffect has a missing dependency: 'events'. Either include it or remove the dependency array.",["557"],"React Hook useEffect has a missing dependency: 'postId'. Either include it or remove the dependency array.",["558"],"'ListSubheader' is defined but never used.","'useStateValue' is defined but never used.","React Hook useEffect has a missing dependency: 'posts'. Either include it or remove the dependency array.",["559"],"'firebase' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["560"],["561"],["562"],"React Hook useEffect has a missing dependency: 'eventToBookmark'. Either include it or remove the dependency array.",["563"],"React Hook useEffect has a missing dependency: 'postToBookmark'. Either include it or remove the dependency array.",["564"],"no-global-assign","no-unsafe-negation",{"desc":"565","fix":"566"},{"desc":"567","fix":"568"},{"desc":"569","fix":"570"},{"desc":"571","fix":"572"},{"desc":"573","fix":"574"},{"desc":"575","fix":"576"},{"desc":"577","fix":"578"},{"desc":"579","fix":"580"},{"desc":"581","fix":"582"},{"desc":"583","fix":"584"},{"desc":"585","fix":"586"},{"desc":"587","fix":"588"},{"desc":"589","fix":"590"},{"desc":"591","fix":"592"},{"desc":"593","fix":"594"},{"desc":"595","fix":"596"},{"desc":"597","fix":"598"},{"desc":"599","fix":"600"},"Update the dependencies array to be: [user, userInfo]",{"range":"601","text":"602"},"Update the dependencies array to be: [user, eventId, eventToShare]",{"range":"603","text":"604"},"Update the dependencies array to be: [user, confessionId, confessionToShare]",{"range":"605","text":"606"},"Update the dependencies array to be: [user, postId, postToShare]",{"range":"607","text":"608"},"Update the dependencies array to be: [user, confessionId, confessionComments, like, likeCount]",{"range":"609","text":"610"},"Update the dependencies array to be: [like, likeCount, postId, user.uid]",{"range":"611","text":"612"},"Update the dependencies array to be: [postId, chats, user, user_id, chats_array]",{"range":"613","text":"614"},"Update the dependencies array to be: [eventId, interested, user.uid]",{"range":"615","text":"616"},"Update the dependencies array to be: [chatId, chat_username, online, currentChat, user.uid]",{"range":"617","text":"618"},"Update the dependencies array to be: [postBookmarks, user]",{"range":"619","text":"620"},"Update the dependencies array to be: [events, palId]",{"range":"621","text":"622"},"Update the dependencies array to be: [commentId, postId, user]",{"range":"623","text":"624"},"Update the dependencies array to be: [palId, posts]",{"range":"625","text":"626"},"Update the dependencies array to be: [chatId, messages.length, recentChat, lastSeen, user]",{"range":"627","text":"628"},"Update the dependencies array to be: [events, user]",{"range":"629","text":"630"},"Update the dependencies array to be: [posts, user]",{"range":"631","text":"632"},"Update the dependencies array to be: [user, eventId, eventToBookmark]",{"range":"633","text":"634"},"Update the dependencies array to be: [user, postId, postToBookmark]",{"range":"635","text":"636"},[2217,2224],"[user, userInfo]",[1086,1103],"[user, eventId, eventToShare]",[1158,1178],"[user, confessionId, confessionToShare]",[1067,1081],"[user, postId, postToShare]",[5432,5454],"[user, confessionId, confessionComments, like, likeCount]",[6901,6911],"[like, likeCount, postId, user.uid]",[8463,8486],"[postId, chats, user, user_id, chats_array]",[2977,2997],"[eventId, interested, user.uid]",[2270,2312],"[chatId, chat_username, online, currentChat, user.uid]",[1411,1419],"[postBookmarks, user]",[1165,1173],"[events, palId]",[1229,1247],"[commentId, postId, user]",[1575,1583],"[palId, posts]",[2878,2923],"[chatId, messages.length, recentChat, lastSeen, user]",[1324,1331],"[events, user]",[1722,1729],"[posts, user]",[884,899],"[user, eventId, eventToBookmark]",[869,883],"[user, postId, postToBookmark]"]